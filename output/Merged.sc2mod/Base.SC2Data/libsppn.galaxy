include "TriggerLibs/NativeLib"

include "LibSPPN_h"

//--------------------------------------------------------------------------------------------------
// Library: SPAWN PANEL
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSPPN_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libSPPN_InitVariables_completed = false;

void libSPPN_InitVariables () {
    int init_i;
    int init_j;

    if (libSPPN_InitVariables_completed) {
        return;
    }

    libSPPN_InitVariables_completed = true;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        libSPPN_gv_creator_selectedRace[init_i] = "Neutral";
    }
    libSPPN_gv_allPlayers = PlayerGroupEmpty();
    libSPPN_gv_allStructures = "";
    libSPPN_gv_allRaces = "";
    libSPPN_gv_allUnits = "";
    libSPPN_gv_allUpgradesSkills = "";
    libSPPN_gv_allUpgradesLevels = "";
    libSPPN_gv_currentStructures = "";
    libSPPN_gv_currentUnits = "";
    libSPPN_gv_currentUpgradesSkills = "";
    libSPPN_gv_currentUpgradesLevels = "";
    libSPPN_gv_spawnDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libSPPN_gv_spawnSets; init_i += 1) {
        libSPPN_gv_spawnDialogCommandsSet[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libSPPN_gv_spawnSets; init_i += 1) {
        for (init_j = 0; init_j <= 14; init_j += 1) {
            libSPPN_gv_spawnDialogCommandsSetButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        libSPPN_gv_creator_tabsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        libSPPN_gv_creator_tabsButtonsimage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        libSPPN_gv_creator_bottomButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        libSPPN_gv_creator_upButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        for (init_j = 0; init_j <= libSPPN_gv_buttonsMax; init_j += 1) {
            libSPPN_gv_creator_itembutton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        for (init_j = 0; init_j <= libSPPN_gv_buttonsMax; init_j += 1) {
            libSPPN_gv_creator_itemunit[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        for (init_j = 0; init_j <= libSPPN_gv_buttonsMax; init_j += 1) {
            libSPPN_gv_creator_itemface[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        libSPPN_gv_buttons_panels[init_i] = c_invalidDialogControlId;
    }
}

// Functions
int libSPPN_gf_CountWords (string lp_str) {
    // Variable Declarations
    int lv_word;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_word = 1;

    // Implementation
    while ((StringWord(lp_str, lv_word) != "")) {
        lv_word = (lv_word + 1);
    }
    return (lv_word - 1);
}

void libSPPN_gf_RunTester () {
    // Automatic Variable Declarations
    // Implementation
    libSPPN_gf_SetupUnitTesterData();
    libSPPN_gf_MakeUnitTesterPlacementCard();
    libSPPN_gf_SelectPanel(1, 2);
    libSPPN_gf_Selectplayer(1, 1);
    libSPPN_gf_SelectRace(PlayerRace(1), 1);
    libSPPN_gf_RenderUnitTesterPlacementCard(1);
}

void libSPPN_gf_SelectRace (string lp_race, int lp_triggeringPlayer) {
    // Variable Declarations
    string lv_upgradeID;
    string lv_unitEntry;
    string lv_upgrade;
    string lv_unitID;
    string lv_raceID;
    string lv_raceID2;
    string lv_race;
    int lv_upgradeLevel;
    string lv_upgradeLevelString;
    string lv_upgradeBase;
    int lv_wordIndex;
    string lv_upgradesTemp;

    // Automatic Variable Declarations
    int autoCDB43DD9_ae;
    const int autoCDB43DD9_ai = 1;
    int autoF94997E9_ae;
    const int autoF94997E9_ai = 1;
    int auto63C6D0E5_ae;
    const int auto63C6D0E5_ai = 1;
    int auto4923750B_ae;
    const int auto4923750B_ai = 1;

    // Variable Initialization
    lv_upgradeID = "";
    lv_unitID = "";
    lv_raceID = "";
    lv_raceID2 = (lp_race);
    lv_upgradeLevelString = "";
    lv_upgradeBase = "";
    lv_upgradesTemp = "";

    // Implementation
    libNtve_gf_SetDialogItemImage(libSPPN_gv_creator_tabsButtonsimage[1], (CatalogFieldValueGet(c_gameCatalogRace, lp_race, "Icon", c_playerAny)), PlayerGroupAll());
    libSPPN_gv_creator_selectedRace[lp_triggeringPlayer] = (lp_race);
    libSPPN_gv_currentUnits = "";
    libSPPN_gv_currentStructures = "";
    libSPPN_gv_currentUpgradesSkills = "";
    libSPPN_gv_currentUpgradesLevels = "";
    autoCDB43DD9_ae = libSPPN_gf_CountWords(libSPPN_gv_allUnits);
    lv_wordIndex = 1;
    for ( ; ( (autoCDB43DD9_ai >= 0 && lv_wordIndex <= autoCDB43DD9_ae) || (autoCDB43DD9_ai < 0 && lv_wordIndex >= autoCDB43DD9_ae) ) ; lv_wordIndex += autoCDB43DD9_ai ) {
        lv_unitID = StringWord(libSPPN_gv_allUnits, lv_wordIndex);
        lv_raceID = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitID, "Race", c_playerAny);
        if ((lv_raceID == lv_raceID2)) {
            libSPPN_gv_currentUnits = (libSPPN_gv_currentUnits + ((lv_unitID) + " "));
        }

    }
    autoF94997E9_ae = libSPPN_gf_CountWords(libSPPN_gv_allStructures);
    lv_wordIndex = 1;
    for ( ; ( (autoF94997E9_ai >= 0 && lv_wordIndex <= autoF94997E9_ae) || (autoF94997E9_ai < 0 && lv_wordIndex >= autoF94997E9_ae) ) ; lv_wordIndex += autoF94997E9_ai ) {
        lv_unitID = StringWord(libSPPN_gv_allStructures, lv_wordIndex);
        lv_raceID = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitID, "Race", c_playerAny);
        if ((lv_raceID == lv_raceID2)) {
            libSPPN_gv_currentStructures = (libSPPN_gv_currentStructures + ((lv_unitID) + " "));
        }

    }
    auto63C6D0E5_ae = libSPPN_gf_CountWords(libSPPN_gv_allUpgradesSkills);
    lv_wordIndex = 1;
    for ( ; ( (auto63C6D0E5_ai >= 0 && lv_wordIndex <= auto63C6D0E5_ae) || (auto63C6D0E5_ai < 0 && lv_wordIndex >= auto63C6D0E5_ae) ) ; lv_wordIndex += auto63C6D0E5_ai ) {
        lv_upgradeID = StringWord(libSPPN_gv_allUpgradesSkills, lv_wordIndex);
        lv_raceID = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgradeID, "Race", c_playerAny);
        if ((lv_raceID == lv_raceID2)) {
            libSPPN_gv_currentUpgradesSkills = (libSPPN_gv_currentUpgradesSkills + ((lv_upgradeID) + " "));
        }

    }
    auto4923750B_ae = libSPPN_gf_CountWords(libSPPN_gv_allUpgradesLevels);
    lv_wordIndex = 1;
    for ( ; ( (auto4923750B_ai >= 0 && lv_wordIndex <= auto4923750B_ae) || (auto4923750B_ai < 0 && lv_wordIndex >= auto4923750B_ae) ) ; lv_wordIndex += auto4923750B_ai ) {
        lv_upgradeID = (StringWord(libSPPN_gv_allUpgradesLevels, lv_wordIndex) + "1");
        if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_upgradeID) == true) && (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgradeID, "Race", c_playerAny) == lv_raceID2)) {
            libSPPN_gv_currentUpgradesLevels = (libSPPN_gv_currentUpgradesLevels + (StringWord(libSPPN_gv_allUpgradesLevels, lv_wordIndex) + " "));
        }

    }
}

void libSPPN_gf_Selectplayer (int lp_player, int lp_triggeringPlayer) {
    // Variable Declarations
    int lv_i;
    int lv_j;

    // Automatic Variable Declarations
    const int auto8FA60BF5_ae = libSPPN_gv_panels;
    const int auto8FA60BF5_ai = 1;
    int auto762F95E9_ae;
    const int auto762F95E9_ai = 1;

    // Variable Initialization

    // Implementation
    libSPPN_gv_creator_selectedPlayer[lp_triggeringPlayer] = lp_player;
    lv_i = 0;
    for ( ; ( (auto8FA60BF5_ai >= 0 && lv_i <= auto8FA60BF5_ae) || (auto8FA60BF5_ai < 0 && lv_i >= auto8FA60BF5_ae) ) ; lv_i += auto8FA60BF5_ai ) {
        libNtve_gf_SetDialogItemDesaturationColor(libSPPN_gv_creator_tabsButtons[lv_i], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturationColor(libSPPN_gv_creator_tabsButtonsimage[lv_i], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), PlayerGroupAll());
        libNtve_gf_SetDialogItemDesaturated(libSPPN_gv_creator_tabsButtonsimage[lv_i], true, PlayerGroupAll());
        auto762F95E9_ae = ((libSPPN_gv_placementCardRows * libSPPN_gv_placementCardColumns) - 1);
        lv_j = 0;
        for ( ; ( (auto762F95E9_ai >= 0 && lv_j <= auto762F95E9_ae) || (auto762F95E9_ai < 0 && lv_j >= auto762F95E9_ae) ) ; lv_j += auto762F95E9_ai ) {
            libNtve_gf_SetDialogItemDesaturationColor(libSPPN_gv_creator_itembutton[lv_i][lv_j], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), PlayerGroupAll());
        }
    }
}

void libSPPN_gf_SelectPanel (int lp_player, int lp_tab) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupSingle(lp_player);

    // Implementation
    if ((libSPPN_gv_selectedTab[lp_player] != -1)) {
        DialogControlSetVisible(libSPPN_gv_buttons_panels[libSPPN_gv_selectedTab[lp_player]], lv_players, false);
        DialogSetVisible(libSPPN_gv_spawnDialog, lv_players, false);
    }

    libSPPN_gv_selectedTab[lp_player] = lp_tab;
    if ((lp_tab == -1)) {
        return ;
    }

    libSPPN_gv_placementCardOffset[lp_tab] = 0;
    libSPPN_gf_RenderUnitTesterPlacementCard(lp_player);
    DialogControlSetVisible(libSPPN_gv_buttons_panels[lp_tab], lv_players, true);
    if (((lp_tab == 2) || (lp_tab == 3))) {
        DialogSetVisible(libSPPN_gv_spawnDialog, lv_players, true);
    }

}

void libSPPN_gf_SetupUnitTesterData () {
    // Variable Declarations
    string lv_upgradeID;
    string lv_unitEntry;
    string lv_upgrade;
    string lv_unitID;
    string lv_race;
    int lv_upgradeLevel;
    string lv_upgradeLevelString;
    string lv_upgradeBase;
    int lv_wordIndex;
    string lv_upgradesTemp;
    int lv_i;
    int lv_j;
    string lv_term;
    string lv_termEvent;
    string lv_termUnit;
    string lv_unitIcon;
    string lv_send;
    string lv_actor;
    int lv_eventsTotal;
    int lv_actorsTotal;

    // Automatic Variable Declarations
    int auto53DE007D_catalog;
    int auto53DE007D_i;
    int auto65335287_catalog;
    int auto65335287_i;
    int autoAD7EF35D_catalog;
    int autoAD7EF35D_i;
    int auto9EEA1EA2_ae;
    const int auto9EEA1EA2_ai = 1;
    int auto832C78BE_ae;
    const int auto832C78BE_ai = 1;

    // Variable Initialization
    lv_upgradeID = "";
    lv_unitID = "";
    lv_upgradeLevelString = "";
    lv_upgradeBase = "";
    lv_upgradesTemp = "";
    lv_term = "";
    lv_termEvent = "";
    lv_termUnit = "";
    lv_unitIcon = "";
    lv_send = "";
    lv_actorsTotal = CatalogEntryCount(c_gameCatalogActor);

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupActive(), libSPPN_gv_allPlayers);
    PlayerGroupAdd(libSPPN_gv_allPlayers, 0);
    PlayerGroupAdd(libSPPN_gv_allPlayers, 15);
    auto53DE007D_catalog = c_gameCatalogRace;
    auto53DE007D_i = 1;
    for ( ; auto53DE007D_i <= CatalogEntryCount(c_gameCatalogRace) ; auto53DE007D_i += 1 ) {
        lv_race = CatalogEntryGet(auto53DE007D_catalog, auto53DE007D_i);
        libSPPN_gv_allRaces = (libSPPN_gv_allRaces + ((lv_race) + " "));
    }
    auto65335287_catalog = c_gameCatalogUnit;
    auto65335287_i = 1;
    for ( ; auto65335287_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto65335287_i += 1 ) {
        lv_unitEntry = CatalogEntryGet(auto65335287_catalog, auto65335287_i);
        if (((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitEntry, "FlagArray[" + IntToString(c_unitFlagUnselectable) + "]", c_playerAny) == "1"))) {
            continue;
        }
        else {
            if ((UnitTypeTestAttribute(lv_unitEntry, c_unitAttributeStructure) == true)) {
                libSPPN_gv_allStructures = (libSPPN_gv_allStructures + ((lv_unitEntry) + " "));
            }
            else {
                libSPPN_gv_allUnits = (libSPPN_gv_allUnits + ((lv_unitEntry) + " "));
            }
        }
    }
    autoAD7EF35D_catalog = c_gameCatalogUpgrade;
    autoAD7EF35D_i = 1;
    for ( ; autoAD7EF35D_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; autoAD7EF35D_i += 1 ) {
        lv_upgrade = CatalogEntryGet(autoAD7EF35D_catalog, autoAD7EF35D_i);
        lv_upgradeID = (lv_upgrade);
        lv_upgradeLevelString = StringSub(lv_upgradeID, StringLength(lv_upgradeID), (StringLength(lv_upgradeID) + 1));
        if (((lv_upgradeLevelString == "1") || (lv_upgradeLevelString == "2") || (lv_upgradeLevelString == "3") || (lv_upgradeLevelString == "4") || (lv_upgradeLevelString == "5") || (lv_upgradeLevelString == "6") || (lv_upgradeLevelString == "7"))) {
            lv_upgradeLevel = StringToInt(StringSub(lv_upgradeID, StringLength(lv_upgradeID), (StringLength(lv_upgradeID) + 1)));
            lv_upgradeBase = StringSub(lv_upgradeID, 1, (StringLength(lv_upgradeID) - 1));
            if ((StringFind((" " + libSPPN_gv_allUpgradesLevels), lv_upgradeBase, c_stringCase) <= 0)) {
                libSPPN_gv_allUpgradesLevels = (libSPPN_gv_allUpgradesLevels + (lv_upgradeBase + " "));
            }

        }
        else {
            lv_upgradeLevel = 0;
            libSPPN_gv_allUpgradesSkills = (libSPPN_gv_allUpgradesSkills + (lv_upgradeID + " "));
        }
    }
    auto9EEA1EA2_ae = lv_actorsTotal;
    lv_i = 1;
    for ( ; ( (auto9EEA1EA2_ai >= 0 && lv_i <= auto9EEA1EA2_ae) || (auto9EEA1EA2_ai < 0 && lv_i >= auto9EEA1EA2_ae) ) ; lv_i += auto9EEA1EA2_ai ) {
        lv_actor = CatalogEntryGet(c_gameCatalogActor, lv_i);
        if (((CatalogEntryClass(c_gameCatalogActor, lv_actor) == 122) || (CatalogEntryClass(c_gameCatalogActor, lv_actor) == 124))) {
            lv_unitIcon = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", c_playerAny);
            if ((lv_unitIcon == "")) {
                continue;
            }

            lv_eventsTotal = (CatalogFieldValueCount(c_gameCatalogActor, lv_actor, "On", c_playerAny) - 1);
            auto832C78BE_ae = lv_eventsTotal;
            lv_j = 0;
            for ( ; ( (auto832C78BE_ai >= 0 && lv_j <= auto832C78BE_ae) || (auto832C78BE_ai < 0 && lv_j >= auto832C78BE_ae) ) ; lv_j += auto832C78BE_ai ) {
                lv_send = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "On[" + IntToString(lv_j) + "].Send", c_playerAny);
                lv_term = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "On[" + IntToString(lv_j) + "].Terms", c_playerAny);
                if ((lv_send == "Create") && (StringFind(lv_term, "UnitBirth", c_stringCase) == 1)) {
                    lv_termUnit = StringSub(lv_term, 11, StringLength(lv_term));
                    if ((StringFind(lv_termUnit, "#", c_stringCase) != 0)) {
                        DataTableSetString(true, ("^ACTOR_" + lv_termUnit), (lv_actor));
                    }

                }

            }
        }

    }
}

void libSPPN_gf_MakeUnitTesterPlacementCard () {
    int init_i;

    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_j;
    int lv_panel;
    string lv_factionString;
    string[libSPPN_gv_panels + 1] lv_icons;
    string[libSPPN_gv_panels + 1] lv_tooltips;
    string lv_bottom;
    int lv_buttonsSet;

    // Automatic Variable Declarations
    const int auto1BDC5D21_ae = 4;
    const int auto1BDC5D21_ai = 1;
    const int auto3BBF7C89_ae = 14;
    const int auto3BBF7C89_ai = 1;
    const int auto2BFDC4F9_ae = libSPPN_gv_panels;
    const int auto2BFDC4F9_ai = 1;
    int autoD9D9517B_ae;
    const int autoD9D9517B_ai = 1;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;
    lv_factionString = "";
    for (init_i = 0; init_i <= libSPPN_gv_panels; init_i += 1) {
        lv_tooltips[init_i] = "";
    }
    lv_bottom = "Assets\\Textures\\ui_planetpanel_arrowbutton_left_normaloverpressedover.dds";

    // Implementation
    DialogCreate((77 * 5), (77 * 12), c_anchorTopLeft, 50, 150, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libSPPN_gv_spawnDialog = DialogLastCreated();
    lv_buttonsSet = 1;
    for ( ; ( (auto1BDC5D21_ai >= 0 && lv_buttonsSet <= auto1BDC5D21_ae) || (auto1BDC5D21_ai < 0 && lv_buttonsSet >= auto1BDC5D21_ae) ) ; lv_buttonsSet += auto1BDC5D21_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, (("SpawnCaster" + IntToString(lv_buttonsSet))), c_unitCreateIgnorePlacement, 1, Point(0.0, 0.0));
        libSPPN_gv_spawnCasters[lv_buttonsSet] = UnitLastCreated();
        DialogControlCreateFromTemplate(libSPPN_gv_spawnDialog, c_triggerControlTypeCommandPanel, "NodTopPanel/SoACommandPanelTemplateTest");
        libSPPN_gv_spawnDialogCommandsSet[lv_buttonsSet] = DialogControlLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 0, (232 * (lv_buttonsSet - 1)));
        libNtve_gf_SetDialogItemUnitGroup(libSPPN_gv_spawnDialogCommandsSet[lv_buttonsSet], libNtve_gf_ConvertUnitToUnitGroup(libSPPN_gv_spawnCasters[lv_buttonsSet]), PlayerGroupAll());
        lv_i = 0;
        for ( ; ( (auto3BBF7C89_ai >= 0 && lv_i <= auto3BBF7C89_ae) || (auto3BBF7C89_ai < 0 && lv_i >= auto3BBF7C89_ae) ) ; lv_i += auto3BBF7C89_ai ) {
            if ((lv_i < 10)) {
                DialogControlHookup(libSPPN_gv_spawnDialogCommandsSet[lv_buttonsSet], c_triggerControlTypeButton, "CommandButton0" + IntToString(lv_i));
            }
            else {
                DialogControlHookup(libSPPN_gv_spawnDialogCommandsSet[lv_buttonsSet], c_triggerControlTypeButton, "CommandButton" + IntToString(lv_i));
            }
            libSPPN_gv_spawnDialogCommandsSetButtons[lv_buttonsSet][lv_i] = DialogControlLastCreated();
        }
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TesterPanel1");
    lv_panel = DialogControlLastCreated();
    DialogControlSetPosition(lv_panel, PlayerGroupAll(), c_anchorTopLeft, 0, 150);
    DialogControlSetVisible(lv_panel, PlayerGroupAll(), true);
    lv_icons[0] = "Assets\\Icons\\infantry-page.dds";
    lv_icons[1] = "Assets\\Textures\\ui_battlenet_glues_multiplayer_racebutton_raceicon_selected_rand.dds";
    lv_icons[2] = "Assets\\Icons\\tank-page.dds";
    lv_icons[3] = "Assets\\Icons\\building-page.dds";
    lv_icons[4] = "Assets\\Icons\\turret-page.dds";
    lv_tooltips[0] = "Select Player";
    lv_tooltips[1] = "Select Race";
    lv_tooltips[2] = "Spawn Units";
    lv_tooltips[3] = "Spawn Buildings";
    lv_tooltips[4] = "Set Upgrades";
    libSPPN_gv_selectedTab[0] = 0;
    lv_i = 0;
    for ( ; ( (auto2BFDC4F9_ai >= 0 && lv_i <= auto2BFDC4F9_ae) || (auto2BFDC4F9_ai < 0 && lv_i >= auto2BFDC4F9_ae) ) ; lv_i += auto2BFDC4F9_ai ) {
        DialogControlCreateInPanelFromTemplate(lv_panel, c_triggerControlTypeButton, "SlimUI/TesterRaceButton");
        libSPPN_gv_creator_tabsButtons[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemDesaturated(libSPPN_gv_creator_tabsButtons[lv_i], true, PlayerGroupAll());
        DialogControlSetPosition(libSPPN_gv_creator_tabsButtons[lv_i], PlayerGroupAll(), c_anchorTopLeft, 0, (lv_i * 50));
        libNtve_gf_SetDialogItemRenderPriority(libSPPN_gv_creator_tabsButtons[lv_i], 199, PlayerGroupAll());
        DialogControlSetVisible(libSPPN_gv_creator_tabsButtons[lv_i], PlayerGroupAll(), true);
        DialogControlHookup(libSPPN_gv_creator_tabsButtons[lv_i], c_triggerControlTypeImage, "FaceImage");
        libSPPN_gv_creator_tabsButtonsimage[lv_i] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(libSPPN_gv_creator_tabsButtonsimage[lv_i], lv_icons[lv_i], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(lv_tooltips[lv_i]), PlayerGroupAll());
        DialogControlSetVisible(libSPPN_gv_creator_tabsButtonsimage[lv_i], PlayerGroupAll(), true);
        lv_x = 0;
        lv_y = 0;
        DialogControlCreateInPanelFromTemplate(lv_panel, c_triggerControlTypePanel, "SlimUI/ItemCard");
        libSPPN_gv_buttons_panels[lv_i] = DialogControlLastCreated();
        DialogControlSetPosition(libSPPN_gv_buttons_panels[lv_i], PlayerGroupAll(), c_anchorTopLeft, 50, 0);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (libSPPN_gv_placementCardColumns * 77), (50 + (libSPPN_gv_placementCardRows * 77)));
        DialogControlSetVisible(libSPPN_gv_buttons_panels[lv_i], PlayerGroupAll(), false);
        autoD9D9517B_ae = ((libSPPN_gv_placementCardRows * libSPPN_gv_placementCardColumns) - 1);
        lv_j = 0;
        for ( ; ( (autoD9D9517B_ai >= 0 && lv_j <= autoD9D9517B_ae) || (autoD9D9517B_ai < 0 && lv_j >= autoD9D9517B_ae) ) ; lv_j += autoD9D9517B_ai ) {
            DialogControlCreateInPanelFromTemplate(libSPPN_gv_buttons_panels[lv_i], c_triggerControlTypeButton, "SlimUI/TesterItemButton");
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_x * 77), (lv_y * 77));
            libSPPN_gv_creator_itembutton[lv_i][lv_j] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemDesaturated(libSPPN_gv_creator_itembutton[lv_i][lv_j], true, PlayerGroupAll());
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "FaceImage");
            libSPPN_gv_creator_itemface[lv_i][lv_j] = DialogControlLastCreated();
            lv_x += 1;
            if ((lv_x == libSPPN_gv_placementCardColumns)) {
                lv_x = 0;
                lv_y += 1;
            }

        }
        DialogControlCreateInPanelFromTemplate(libSPPN_gv_buttons_panels[lv_i], c_triggerControlTypeButton, "SlimUI/TesterRaceButton");
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 199, PlayerGroupAll());
        libSPPN_gv_creator_bottomButton[lv_i] = DialogControlLastCreated();
        DialogControlSetSize(libSPPN_gv_creator_bottomButton[lv_i], PlayerGroupAll(), 50, 50);
        DialogControlSetPosition(libSPPN_gv_creator_bottomButton[lv_i], PlayerGroupAll(), c_anchorBottomRight, 0, 0);
        DialogControlSetVisible(libSPPN_gv_creator_bottomButton[lv_i], PlayerGroupAll(), true);
        DialogControlHookup(libSPPN_gv_creator_bottomButton[lv_i], c_triggerControlTypeImage, "FaceImage");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_arrowwhite.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        DialogControlCreateInPanelFromTemplate(libSPPN_gv_buttons_panels[lv_i], c_triggerControlTypeButton, "SlimUI/TesterRaceButton");
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 199, PlayerGroupAll());
        libSPPN_gv_creator_upButton[lv_i] = DialogControlLastCreated();
        DialogControlSetSize(libSPPN_gv_creator_upButton[lv_i], PlayerGroupAll(), 50, 50);
        DialogControlSetPosition(libSPPN_gv_creator_upButton[lv_i], PlayerGroupAll(), c_anchorBottomRight, 50, 0);
        DialogControlSetVisible(libSPPN_gv_creator_upButton[lv_i], PlayerGroupAll(), true);
        DialogControlSetVisible(libSPPN_gv_creator_upButton[lv_i], PlayerGroupAll(), true);
        DialogControlHookup(libSPPN_gv_creator_upButton[lv_i], c_triggerControlTypeImage, "FaceImage");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_arrowwhite.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 0, PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }
}

void libSPPN_gf_RenderUnitTesterPlacementCard (int lp_player) {
    // Variable Declarations
    int lv_minShow;
    int lv_maxShow;
    int lv_maxTotal;
    int lv_x;
    int lv_y;
    int lv_selectedTab;
    int lv_itemIndex;
    int lv_buttonIndex;
    string lv_unit;
    string lv_actor;
    string lv_upgrade;
    abilcmd lv_command;
    string lv_button;
    playergroup lv_players;
    int lv_bottom_panel;
    int lv_buttons_panel;
    string lv_factionString;
    int lv_p;
    int lv_level;
    int lv_buttonSetIndex;
    int lv_abilityCommandIndex;
    string lv_casterAbility;
    string lv_casterButton;
    string lv_icon;
    string lv_unitsDataString;

    // Automatic Variable Declarations
    int autoA4151B32_ae;
    const int autoA4151B32_ai = 1;
    int autoF5995DA1_val;
    const int auto6E9C3ED1_ae = libSPPN_gv_spawnSets;
    const int auto6E9C3ED1_ai = 1;
    const int auto9E5EEF23_ae = 14;
    const int auto9E5EEF23_ai = 1;
    int autoCC082C96_ae;
    const int autoCC082C96_ai = 1;
    int auto8EC66AEB_ae;
    const int auto8EC66AEB_ai = 1;
    int auto73F3EC5C_ae;
    const int auto73F3EC5C_ai = 1;
    int autoDC56FA66_ae;
    const int autoDC56FA66_ai = 1;

    // Variable Initialization
    lv_selectedTab = libSPPN_gv_selectedTab[lp_player];
    lv_actor = "";
    lv_players = PlayerGroupSingle(lp_player);
    lv_bottom_panel = c_invalidDialogControlId;
    lv_buttons_panel = c_invalidDialogControlId;
    lv_factionString = "";
    lv_icon = "";
    lv_unitsDataString = "";

    // Implementation
    if ((lv_selectedTab == -1)) {
        return ;
    }

    autoA4151B32_ae = ((libSPPN_gv_placementCardRows * libSPPN_gv_placementCardColumns) - 1);
    lv_itemIndex = 0;
    for ( ; ( (autoA4151B32_ai >= 0 && lv_itemIndex <= autoA4151B32_ae) || (autoA4151B32_ai < 0 && lv_itemIndex >= autoA4151B32_ae) ) ; lv_itemIndex += autoA4151B32_ai ) {
        DialogControlSetEnabled(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_itemIndex], lv_players, false);
        DialogControlSetVisible(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_itemIndex], lv_players, false);
        libNtve_gf_SetDialogItemTooltip(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_itemIndex], StringToText(""), lv_players);
        DialogControlSetVisible(libSPPN_gv_creator_itemface[lv_selectedTab][lv_itemIndex], lv_players, false);
    }
    autoF5995DA1_val = libSPPN_gv_selectedTab[lp_player];
    if (autoF5995DA1_val == 0) {
        lv_maxTotal = PlayerGroupCount(libSPPN_gv_allPlayers);
        lv_minShow = (1 + (libSPPN_gv_placementCardOffset[lv_selectedTab] * libSPPN_gv_placementCardColumns));
        lv_maxShow = MinI(lv_maxTotal, ((lv_minShow - 1) + (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows)));
        auto8EC66AEB_ae = lv_maxShow;
        lv_itemIndex = lv_minShow;
        for ( ; ( (auto8EC66AEB_ai >= 0 && lv_itemIndex <= auto8EC66AEB_ae) || (auto8EC66AEB_ai < 0 && lv_itemIndex >= auto8EC66AEB_ae) ) ; lv_itemIndex += auto8EC66AEB_ai ) {
            lv_buttonIndex = (lv_itemIndex - lv_minShow);
            lv_p = PlayerGroupPlayer(libSPPN_gv_allPlayers, lv_itemIndex);
            libSPPN_gv_creator_itemunit[lv_selectedTab][lv_buttonIndex] = IntToString(lv_p);
            DialogControlSetVisible(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], lv_players, true);
            DialogControlSetEnabled(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], lv_players, true);
            DialogControlSetEnabled(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], lv_players, true);
            libNtve_gf_SetDialogItemTooltip(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], PlayerName(lv_p), lv_players);
            lv_factionString = (PlayerRace(lv_p));
            if ((lv_factionString != "")) {
                libNtve_gf_SetDialogItemImage(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], (CatalogFieldValueGet(c_gameCatalogRace, PlayerRace(lv_p), "Icon", c_playerAny)), lv_players);
                DialogControlSetVisible(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], lv_players, true);
            }
            else {
                DialogControlSetVisible(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], lv_players, false);
            }
        }
    }
    else if (autoF5995DA1_val == 1) {
        lv_maxTotal = libSPPN_gf_CountWords(libSPPN_gv_allRaces);
        lv_minShow = (1 + (libSPPN_gv_placementCardOffset[lv_selectedTab] * libSPPN_gv_placementCardColumns));
        lv_maxShow = MinI(lv_maxTotal, ((lv_minShow - 1) + (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows)));
        auto73F3EC5C_ae = lv_maxShow;
        lv_itemIndex = lv_minShow;
        for ( ; ( (auto73F3EC5C_ai >= 0 && lv_itemIndex <= auto73F3EC5C_ae) || (auto73F3EC5C_ai < 0 && lv_itemIndex >= auto73F3EC5C_ae) ) ; lv_itemIndex += auto73F3EC5C_ai ) {
            lv_buttonIndex = (lv_itemIndex - lv_minShow);
            lv_factionString = StringWord(libSPPN_gv_allRaces, lv_itemIndex);
            libSPPN_gv_creator_itemunit[lv_selectedTab][lv_buttonIndex] = lv_factionString;
            DialogControlSetVisible(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], lv_players, true);
            DialogControlSetEnabled(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], lv_players, true);
            if ((lv_factionString != "")) {
                DialogControlSetEnabled(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], lv_players, true);
                TextExpressionSetToken("Param/Expression/lib_SPPN_94E0AF4B", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogRace, lv_factionString, "Name", c_playerAny)));
                libNtve_gf_SetDialogItemTooltip(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], TextExpressionAssemble("Param/Expression/lib_SPPN_94E0AF4B"), lv_players);
                libNtve_gf_SetDialogItemImage(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], (CatalogFieldValueGet(c_gameCatalogRace, lv_factionString, "Icon", c_playerAny)), lv_players);
                DialogControlSetVisible(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], lv_players, true);
            }
            else {
                DialogControlSetVisible(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], lv_players, false);
            }
        }
    }
    else if (autoF5995DA1_val == 4) {
        lv_maxTotal = (libSPPN_gf_CountWords(libSPPN_gv_currentUpgradesSkills) + libSPPN_gf_CountWords(libSPPN_gv_currentUpgradesLevels));
        lv_minShow = (1 + (libSPPN_gv_placementCardOffset[lv_selectedTab] * libSPPN_gv_placementCardColumns));
        lv_maxShow = MinI(lv_maxTotal, ((lv_minShow - 1) + (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows)));
        autoDC56FA66_ae = lv_maxShow;
        lv_itemIndex = lv_minShow;
        for ( ; ( (autoDC56FA66_ai >= 0 && lv_itemIndex <= autoDC56FA66_ae) || (autoDC56FA66_ai < 0 && lv_itemIndex >= autoDC56FA66_ae) ) ; lv_itemIndex += autoDC56FA66_ai ) {
            lv_buttonIndex = (lv_itemIndex - lv_minShow);
            if ((lv_itemIndex <= libSPPN_gf_CountWords(libSPPN_gv_currentUpgradesLevels))) {
                lv_level = 1;
                while ((CatalogEntryIsValid(c_gameCatalogUpgrade, (StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level))) == true) && (TechTreeUpgradeCount(libSPPN_gv_creator_selectedPlayer[lp_player], ((StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level))), c_techCountCompleteOnly) > 0)) {
                    lv_level = (lv_level + 1);
                }
                lv_level = (lv_level - 1);
                if ((lv_level == 0)) {
                    lv_upgrade = ((StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(1)));
                }
                else {
                    lv_upgrade = ((StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level)));
                }
            }
            else {
                lv_upgrade = (StringWord(libSPPN_gv_currentUpgradesSkills, (lv_itemIndex - libSPPN_gf_CountWords(libSPPN_gv_currentUpgradesLevels))));
            }
            lv_command = TechTreeUpgradeProducedAbilCmd(lv_upgrade, 0);
            libSPPN_gv_creator_itemunit[lv_selectedTab][lv_buttonIndex] = (lv_upgrade);
            if ((lv_command != null)) {
                lv_button = (CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Button.DefaultButtonFace", lp_player));
                TextExpressionSetToken("Param/Expression/lib_SPPN_D9FC2478", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", c_playerAny)));
                TextExpressionSetToken("Param/Expression/lib_SPPN_D9FC2478", "min_icon", StringExternal("UI/Icon22_Minerals_Terr"));
                TextExpressionSetToken("Param/Expression/lib_SPPN_D9FC2478", "min_val", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Resource[" + IntToString(0) + "]", c_playerAny)));
                TextExpressionSetToken("Param/Expression/lib_SPPN_D9FC2478", "gas_icon", StringExternal("UI/Icon22_Vespene_Terr"));
                TextExpressionSetToken("Param/Expression/lib_SPPN_D9FC2478", "gas_val", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Resource[" + IntToString(1) + "]", c_playerAny)));
                TextExpressionSetToken("Param/Expression/lib_SPPN_D9FC2478", "desc", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Tooltip", c_playerAny)));
                libNtve_gf_SetDialogItemTooltip(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], TextExpressionAssemble("Param/Expression/lib_SPPN_D9FC2478"), lv_players);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_SPPN_CAF2A48D", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "Name", c_playerAny)));
                libNtve_gf_SetDialogItemTooltip(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], TextExpressionAssemble("Param/Expression/lib_SPPN_CAF2A48D"), lv_players);
            }
            DialogControlSetVisible(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], lv_players, true);
            DialogControlSetEnabled(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], lv_players, true);
            libNtve_gf_SetDialogItemImage(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], (CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "Icon", c_playerAny)), lv_players);
            if ((lv_itemIndex <= libSPPN_gf_CountWords(libSPPN_gv_currentUpgradesLevels))) {
                if ((lv_level > 0)) {
                    DialogControlSetEnabled(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], PlayerGroupSingle(lp_player), true);
                }
                else {
                    DialogControlSetEnabled(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], PlayerGroupSingle(lp_player), false);
                }
            }
            else {
                if ((TechTreeUpgradeCount(libSPPN_gv_creator_selectedPlayer[lp_player], lv_upgrade, c_techCountCompleteOnly) > 0)) {
                    DialogControlSetEnabled(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], PlayerGroupSingle(lp_player), true);
                }
                else {
                    DialogControlSetEnabled(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], PlayerGroupSingle(lp_player), false);
                }
            }
            DialogControlSetVisible(libSPPN_gv_creator_itemface[lv_selectedTab][lv_buttonIndex], lv_players, true);
        }
    }
    else {
        lv_buttonSetIndex = 1;
        for ( ; ( (auto6E9C3ED1_ai >= 0 && lv_buttonSetIndex <= auto6E9C3ED1_ae) || (auto6E9C3ED1_ai < 0 && lv_buttonSetIndex >= auto6E9C3ED1_ae) ) ; lv_buttonSetIndex += auto6E9C3ED1_ai ) {
            lv_abilityCommandIndex = 0;
            for ( ; ( (auto9E5EEF23_ai >= 0 && lv_abilityCommandIndex <= auto9E5EEF23_ae) || (auto9E5EEF23_ai < 0 && lv_abilityCommandIndex >= auto9E5EEF23_ae) ) ; lv_abilityCommandIndex += auto9E5EEF23_ai ) {
                lv_casterAbility = (("SpawnCaster" + IntToString(lv_buttonSetIndex)));
                CatalogFieldValueSet(c_gameCatalogAbil, lv_casterAbility, "InfoArray[" + IntToString(lv_abilityCommandIndex) + "].Unit", lp_player, "");
            }
        }
        if ((lv_selectedTab == 2)) {
            lv_unitsDataString = libSPPN_gv_currentUnits;
        }
        else {
            lv_unitsDataString = libSPPN_gv_currentStructures;
        }
        lv_maxTotal = libSPPN_gf_CountWords(lv_unitsDataString);
        lv_minShow = (1 + (libSPPN_gv_placementCardOffset[lv_selectedTab] * libSPPN_gv_placementCardColumns));
        lv_maxShow = MinI(lv_maxTotal, ((lv_minShow - 1) + (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows)));
        autoCC082C96_ae = lv_maxShow;
        lv_itemIndex = lv_minShow;
        for ( ; ( (autoCC082C96_ai >= 0 && lv_itemIndex <= autoCC082C96_ae) || (autoCC082C96_ai < 0 && lv_itemIndex >= autoCC082C96_ae) ) ; lv_itemIndex += autoCC082C96_ai ) {
            lv_buttonIndex = (lv_itemIndex - lv_minShow);
            lv_unit = (StringWord(lv_unitsDataString, lv_itemIndex));
            lv_actor = DataTableGetString(true, ("^ACTOR_" + (lv_unit)));
            if ((CatalogEntryIsValid(c_gameCatalogActor, lv_actor) == true)) {
                lv_icon = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", lp_player);
            }
            else {
                lv_icon = ("Assets\\Textures\\sc2_ui_glues_icons_purchasewarning.dds");
            }
            libSPPN_gv_creator_itemunit[lv_selectedTab][lv_buttonIndex] = (lv_unit);
            DialogControlSetVisible(libSPPN_gv_creator_itembutton[lv_selectedTab][lv_buttonIndex], lv_players, false);
            if ((lv_buttonIndex >= 15)) {
                if ((lv_buttonIndex >= 30)) {
                    if ((lv_buttonIndex >= 45)) {
                        lv_buttonSetIndex = 4;
                        lv_abilityCommandIndex = (lv_buttonIndex - 45);
                    }
                    else {
                        lv_buttonSetIndex = 3;
                        lv_abilityCommandIndex = (lv_buttonIndex - 30);
                    }
                }
                else {
                    lv_buttonSetIndex = 2;
                    lv_abilityCommandIndex = (lv_buttonIndex - 15);
                }
            }
            else {
                lv_buttonSetIndex = 1;
                lv_abilityCommandIndex = lv_buttonIndex;
            }
            lv_casterAbility = (("SpawnCaster" + IntToString(lv_buttonSetIndex)));
            lv_casterButton = (("SpawnCaster" + IntToString((lv_buttonIndex + 1))));
            CatalogFieldValueSet(c_gameCatalogAbil, lv_casterAbility, "InfoArray[" + IntToString(lv_abilityCommandIndex) + "].Unit", lp_player, (lv_unit));
            CatalogFieldValueSet(c_gameCatalogButton, lv_casterButton, "Icon", lp_player, lv_icon);
            CatalogFieldValueSet(c_gameCatalogButton, lv_casterButton, "Name", lp_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Name", c_playerAny));
            CatalogFieldValueSet(c_gameCatalogButton, lv_casterButton, "Tooltip", lp_player, CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Description", c_playerAny));
        }
    }
    if ((lv_minShow > 1)) {
        DialogControlSetVisible(libSPPN_gv_creator_upButton[lv_selectedTab], lv_players, true);
    }
    else {
        DialogControlSetVisible(libSPPN_gv_creator_upButton[lv_selectedTab], lv_players, false);
    }
    if ((lv_maxShow < lv_maxTotal)) {
        DialogControlSetVisible(libSPPN_gv_creator_bottomButton[lv_selectedTab], lv_players, true);
    }
    else {
        DialogControlSetVisible(libSPPN_gv_creator_bottomButton[lv_selectedTab], lv_players, false);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Show Unit Abilities And behaviors
//--------------------------------------------------------------------------------------------------
bool libSPPN_gt_UntitledTrigger001_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_abil;
    string lv_beh;
    string lv_abils;
    string lv_behs;

    // Automatic Variable Declarations
    unit auto235E1E06_unit;
    int auto235E1E06_i;
    unit auto0D27C247_u;
    int auto0D27C247_i;

    // Variable Initialization
    lv_unit = UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1);
    lv_abils = "";
    lv_behs = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto235E1E06_unit = lv_unit;
    auto235E1E06_i = 1;
    for ( ; auto235E1E06_i <= UnitAbilityCount(auto235E1E06_unit) ; auto235E1E06_i += 1 ) {
        lv_abil = UnitAbilityGet(auto235E1E06_unit, auto235E1E06_i);
        lv_abils = (lv_abils + " ");
        lv_abils = (lv_abils + (lv_abil));
    }
    auto0D27C247_u = lv_unit;
    auto0D27C247_i = 1;
    for ( ; auto0D27C247_i <= UnitBehaviorCountAll(auto0D27C247_u) ; auto0D27C247_i += BoolToInt(lv_beh == UnitBehaviorGet(auto0D27C247_u, auto0D27C247_i)) ) {
        lv_beh = UnitBehaviorGet(auto0D27C247_u, auto0D27C247_i);
        lv_behs = (lv_behs + " ");
        lv_behs = (lv_behs + (lv_beh));
    }
    TriggerDebugOutput(1, StringToText(lv_abils), true);
    TriggerDebugOutput(1, StringToText(lv_behs), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSPPN_gt_UntitledTrigger001_Init () {
    libSPPN_gt_UntitledTrigger001 = TriggerCreate("libSPPN_gt_UntitledTrigger001_Func");
    TriggerAddEventChatMessage(libSPPN_gt_UntitledTrigger001, c_playerAny, "-d", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Change Spawned Unit Owner
//--------------------------------------------------------------------------------------------------
bool libSPPN_gt_ChangeSpawnedUnitOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitCreatedUnit(), libSPPN_gv_creator_selectedPlayer[UnitGetOwner(EventUnitCreatedUnit())], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSPPN_gt_ChangeSpawnedUnitOwner_Init () {
    libSPPN_gt_ChangeSpawnedUnitOwner = TriggerCreate("libSPPN_gt_ChangeSpawnedUnitOwner_Func");
    TriggerAddEventUnitCreated(libSPPN_gt_ChangeSpawnedUnitOwner, null, "SpawnCaster1", null);
    TriggerAddEventUnitCreated(libSPPN_gt_ChangeSpawnedUnitOwner, null, "SpawnCaster2", null);
    TriggerAddEventUnitCreated(libSPPN_gt_ChangeSpawnedUnitOwner, null, "SpawnCaster3", null);
    TriggerAddEventUnitCreated(libSPPN_gt_ChangeSpawnedUnitOwner, null, "SpawnCaster4", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Card Button Cliked
//--------------------------------------------------------------------------------------------------
bool libSPPN_gt_CardButtonCliked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cardlayout;
    string lv_unit;
    int lv_offset;
    int lv_itemIndex;
    string lv_upgrade;
    int lv_level;

    // Automatic Variable Declarations
    const int auto86E26A31_ae = libSPPN_gv_panels;
    int auto86E26A31_var;
    const int autoB20CAE6F_ae = libSPPN_gv_panels;
    int autoB20CAE6F_var;
    int autoF6DB226A_ae;
    int autoF6DB226A_var;
    int autoB28A309C_ae;
    int autoB28A309C_var;
    int auto60D0F3F8_ae;
    int auto60D0F3F8_var;
    int auto3D4F2127_ae;
    int auto3D4F2127_var;
    int autoB7B877E5_ae;
    int autoB7B877E5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto86E26A31_var = 0;
    for ( ; auto86E26A31_var <= auto86E26A31_ae; auto86E26A31_var += 1 ) {
        if ((EventDialogControl() == libSPPN_gv_creator_bottomButton[auto86E26A31_var])) {
            libSPPN_gv_placementCardOffset[auto86E26A31_var] += 1;
            libSPPN_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }

        if ((EventDialogControl() == libSPPN_gv_creator_upButton[auto86E26A31_var])) {
            libSPPN_gv_placementCardOffset[auto86E26A31_var] -= 1;
            libSPPN_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }

    }
    autoB20CAE6F_var = 0;
    for ( ; autoB20CAE6F_var <= autoB20CAE6F_ae; autoB20CAE6F_var += 1 ) {
        if ((EventDialogControl() == libSPPN_gv_creator_tabsButtons[autoB20CAE6F_var])) {
            if ((libSPPN_gv_selectedTab[EventPlayer()] == autoB20CAE6F_var)) {
                libSPPN_gf_SelectPanel(EventPlayer(), -1);
            }
            else {
                libSPPN_gf_SelectPanel(EventPlayer(), autoB20CAE6F_var);
            }
            return true;
        }

    }
    lv_cardlayout = 0;
    autoF6DB226A_ae = (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows);
    autoF6DB226A_var = 0;
    for ( ; autoF6DB226A_var <= autoF6DB226A_ae; autoF6DB226A_var += 1 ) {
        if ((EventDialogControl() == libSPPN_gv_creator_itembutton[lv_cardlayout][autoF6DB226A_var])) {
            libSPPN_gf_Selectplayer(StringToInt(libSPPN_gv_creator_itemunit[lv_cardlayout][autoF6DB226A_var]), EventPlayer());
            libSPPN_gf_SelectPanel(EventPlayer(), 1);
            return true;
        }

    }
    lv_cardlayout = (lv_cardlayout + 1);
    autoB28A309C_ae = (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows);
    autoB28A309C_var = 0;
    for ( ; autoB28A309C_var <= autoB28A309C_ae; autoB28A309C_var += 1 ) {
        if ((EventDialogControl() == libSPPN_gv_creator_itembutton[lv_cardlayout][autoB28A309C_var])) {
            libSPPN_gv_creator_selectedRace[EventPlayer()] = libSPPN_gv_creator_itemunit[lv_cardlayout][autoB28A309C_var];
            libSPPN_gf_SelectRace((libSPPN_gv_creator_selectedRace[EventPlayer()]), 0);
            libSPPN_gf_RenderUnitTesterPlacementCard(EventPlayer());
            libSPPN_gf_SelectPanel(EventPlayer(), 2);
            return true;
        }

    }
    lv_cardlayout = (lv_cardlayout + 1);
    auto60D0F3F8_ae = (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows);
    auto60D0F3F8_var = 0;
    for ( ; auto60D0F3F8_var <= auto60D0F3F8_ae; auto60D0F3F8_var += 1 ) {
        if ((EventDialogControl() == libSPPN_gv_creator_itembutton[lv_cardlayout][auto60D0F3F8_var])) {
            lv_unit = (libSPPN_gv_creator_itemunit[lv_cardlayout][auto60D0F3F8_var]);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unit, 0, libSPPN_gv_creator_selectedPlayer[EventPlayer()], CameraGetTarget(EventPlayer()));
            UnitGroupSelect(UnitLastCreatedGroup(), EventPlayer(), true);
            return true;
        }

    }
    lv_cardlayout = (lv_cardlayout + 1);
    auto3D4F2127_ae = (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows);
    auto3D4F2127_var = 0;
    for ( ; auto3D4F2127_var <= auto3D4F2127_ae; auto3D4F2127_var += 1 ) {
        if ((EventDialogControl() == libSPPN_gv_creator_itembutton[lv_cardlayout][auto3D4F2127_var])) {
            lv_unit = (libSPPN_gv_creator_itemunit[lv_cardlayout][auto3D4F2127_var]);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unit, 0, libSPPN_gv_creator_selectedPlayer[EventPlayer()], CameraGetTarget(EventPlayer()));
            UnitGroupSelect(UnitLastCreatedGroup(), EventPlayer(), true);
            return true;
        }

    }
    lv_cardlayout = (lv_cardlayout + 1);
    lv_offset = (1 + (libSPPN_gv_placementCardOffset[lv_cardlayout] * libSPPN_gv_placementCardColumns));
    autoB7B877E5_ae = (libSPPN_gv_placementCardColumns * libSPPN_gv_placementCardRows);
    autoB7B877E5_var = 0;
    for ( ; autoB7B877E5_var <= autoB7B877E5_ae; autoB7B877E5_var += 1 ) {
        if ((EventDialogControl() == libSPPN_gv_creator_itembutton[lv_cardlayout][autoB7B877E5_var])) {
            lv_itemIndex = (autoB7B877E5_var - lv_offset);
            lv_itemIndex = (lv_itemIndex + 2);
            if ((lv_itemIndex <= libSPPN_gf_CountWords(libSPPN_gv_currentUpgradesLevels))) {
                lv_level = 1;
                while ((CatalogEntryIsValid(c_gameCatalogUpgrade, (StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level))) == true) && (TechTreeUpgradeCount(libSPPN_gv_creator_selectedPlayer[EventPlayer()], ((StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level))), c_techCountCompleteOnly) > 0)) {
                    lv_level = (lv_level + 1);
                }
                if ((CatalogEntryIsValid(c_gameCatalogUpgrade, (StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level))) == true)) {
                    lv_upgrade = ((StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level)));
                    libNtve_gf_SetUpgradeLevelForPlayer(libSPPN_gv_creator_selectedPlayer[EventPlayer()], lv_upgrade, 1);
                }
                else {
                    lv_level = 1;
                    while ((CatalogEntryIsValid(c_gameCatalogUpgrade, (StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level))) == true)) {
                        lv_upgrade = ((StringWord(libSPPN_gv_currentUpgradesLevels, lv_itemIndex) + IntToString(lv_level)));
                        libNtve_gf_SetUpgradeLevelForPlayer(libSPPN_gv_creator_selectedPlayer[EventPlayer()], lv_upgrade, 0);
                        lv_level = (lv_level + 1);
                    }
                }
            }
            else {
                lv_upgrade = (libSPPN_gv_creator_itemunit[lv_cardlayout][autoB7B877E5_var]);
                if ((TechTreeUpgradeCount(libSPPN_gv_creator_selectedPlayer[EventPlayer()], lv_upgrade, c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(libSPPN_gv_creator_selectedPlayer[EventPlayer()], lv_upgrade, 0);
                }
                else {
                    libNtve_gf_SetUpgradeLevelForPlayer(libSPPN_gv_creator_selectedPlayer[EventPlayer()], lv_upgrade, 1);
                }
            }
            libSPPN_gf_RenderUnitTesterPlacementCard(EventPlayer());
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSPPN_gt_CardButtonCliked_Init () {
    libSPPN_gt_CardButtonCliked = TriggerCreate("libSPPN_gt_CardButtonCliked_Func");
    TriggerAddEventDialogControl(libSPPN_gt_CardButtonCliked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void libSPPN_InitTriggers () {
    libSPPN_gt_UntitledTrigger001_Init();
    libSPPN_gt_ChangeSpawnedUnitOwner_Init();
    libSPPN_gt_CardButtonCliked_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSPPN_InitLib_completed = false;

void libSPPN_InitLib () {
    if (libSPPN_InitLib_completed) {
        return;
    }

    libSPPN_InitLib_completed = true;

    libSPPN_InitLibraries();
    libSPPN_InitVariables();
    libSPPN_InitTriggers();
}

