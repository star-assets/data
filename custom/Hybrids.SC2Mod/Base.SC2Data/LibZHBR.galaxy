include "TriggerLibs/NativeLib"

include "LibZHBR_h"

//--------------------------------------------------------------------------------------------------
// Library: Factions - Void Forces
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libZHBR_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libZHBR_InitVariables_completed = false;

void libZHBR_InitVariables () {
    int init_i;

    if (libZHBR_InitVariables_completed) {
        return;
    }

    libZHBR_InitVariables_completed = true;

    for (init_i = 0; init_i <= 15; init_i += 1) {
        libZHBR_gv_playerGroupFromPlayer[init_i] = PlayerGroupEmpty();
    }
    libZHBR_gv_raceControlButton = c_invalidDialogControlId;
    libZHBR_gv_hybridBuildControllerRange = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogAbil, ("ZHBRMinionBuild@Main"), "Range", c_playerAny);
}

// Presets
// Functions
string libZHBR_gf__UnitDataName (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int autoE89C9E31_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    autoE89C9E31_val = lp_type;
    if (autoE89C9E31_val == libZHBR_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (autoE89C9E31_val == libZHBR_ge__UnitDataType_Integer) {
        lv_name = "UDINTEGER_";
    }
    else if (autoE89C9E31_val == libZHBR_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else if (autoE89C9E31_val == libZHBR_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (autoE89C9E31_val == libZHBR_ge__UnitDataType_Region) {
        lv_name = "UDREGION_";
    }
    else if (autoE89C9E31_val == libZHBR_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (autoE89C9E31_val == libZHBR_ge__UnitDataType_Unit) {
        lv_name = "UDUNIT_";
    }
    else if (autoE89C9E31_val == libZHBR_ge__UnitDataType_UnitGroup) {
        lv_name = "UDUNITGROUP_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libZHBR_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, libZHBR_gf__UnitDataName(libZHBR_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libZHBR_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, libZHBR_gf__UnitDataName(libZHBR_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void libZHBR_gf_RaceControlCreateUnit (int lp_player) {
    // Automatic Variable Declarations
    string autoF74EC56F_val;

    // Implementation
    TriggerExecute(libZHBR_gt_RaceControlButtonInitialization, true, true);
    if ((libZHBR_gv_raceControlUnit[lp_player] != null)) {
        return ;
    }

    autoF74EC56F_val = PlayerRace(lp_player);
    if (autoF74EC56F_val == "ZHBR") {
        UnitCreate(1, "ZHBRRaceControl", c_unitCreateIgnorePlacement, lp_player, Point(0.0, 0.0), 270.0);
    }
    else {
        return ;
    }
    libZHBR_gv_raceControlUnit[lp_player] = UnitLastCreated();
}

bool libZHBR_gf_HybridBuildControllerIsBuildOrder (order lp_order) {
    // Variable Declarations
    abilcmd lv_abilityCommand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityCommand = OrderGetAbilityCommand(lp_order);

    // Implementation
    return (AbilityCommandGetAbility(lv_abilityCommand) == "ZHBRMinionBuild");
}

bool libZHBR_gf_HybridBuildControllerIsBuildOrderMain (order lp_order) {
    // Variable Declarations
    abilcmd lv_abilityCommand;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityCommand = OrderGetAbilityCommand(lp_order);

    // Implementation
    return (AbilityCommandGetAbility(lv_abilityCommand) == "ZHBRMinionBuild@Main");
}

abilcmd libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand (order lp_order) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = AbilityCommandGetCommand(OrderGetAbilityCommand(lp_order));

    // Implementation
    return AbilityCommand("ZHBRMinionBuild@Main", lv_index);
}

abilcmd libZHBR_gf_HybridBuildControllerReturnDefaultBuildAbilityCommand (order lp_order) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = AbilityCommandGetCommand(OrderGetAbilityCommand(lp_order));

    // Implementation
    return AbilityCommand("ZHBRMinionBuild", lv_index);
}

int libZHBR_gf_HybridBuildControllerClosestMainBuildAbilityCommandIndex (unit lp_minion) {
    // Variable Declarations
    int lv_itOrder;

    // Automatic Variable Declarations
    int autoF046562B_ae;
    const int autoF046562B_ai = 1;

    // Variable Initialization

    // Implementation
    autoF046562B_ae = (UnitOrderCount(lp_minion)-1);
    lv_itOrder = 0;
    for ( ; ( (autoF046562B_ai >= 0 && lv_itOrder <= autoF046562B_ae) || (autoF046562B_ai < 0 && lv_itOrder >= autoF046562B_ae) ) ; lv_itOrder += autoF046562B_ai ) {
        if ((libZHBR_gf_HybridBuildControllerIsBuildOrderMain(UnitOrder(lp_minion, lv_itOrder)) == true)) {
            return lv_itOrder;
        }

    }
    return -1;
}

fixed libZHBR_gf_HybridBuildControllerReturnBuildUnitRadius (order lp_order) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = AbilityCommandGetCommand(OrderGetAbilityCommand(lp_order));

    // Implementation
    return libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, CatalogFieldValueGet(c_gameCatalogAbil, ("ZHBRMinionBuild@Main"), "InfoArray[" + IntToString(lv_index) + "].Unit", c_playerAny), "Radius", c_playerAny);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Offline Initialization
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_OfflineInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsOnline() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerSetRace(1, "ZHBR");
    TriggerExecute(libZHBR_gt_InitializeHybrids, true, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    Wait(1.0, c_timeGame);
    ConsoleCommand("Fastbuild", true, true);
    ConsoleCommand("showmap", true, true);
    PlayerSetAlliance(2, c_allianceIdControl, 1, true);
    PlayerSetState(1, c_playerStateFoodIgnored, true);
    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 100000);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 100000);
    while (true) {
        PlayerModifyPropertyInt(2, c_playerPropMinerals, c_playerPropOperSetTo, 0);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_OfflineInitialization_Init () {
    libZHBR_gt_OfflineInitialization = TriggerCreate("libZHBR_gt_OfflineInitialization_Func");
    TriggerEnable(libZHBR_gt_OfflineInitialization, false);
    TriggerAddEventMapInit(libZHBR_gt_OfflineInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Hybrids
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_InitializeHybrids_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto20B5C11E_g;
    playergroup auto70EC4FF1_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto20B5C11E_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto20B5C11E_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        libZHBR_gv_playerGroupFromPlayer[lv_itPlayer] = PlayerGroupSingle(lv_itPlayer);
    }
    UnitEventSetNullVariableInvalid(true);
    auto70EC4FF1_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto70EC4FF1_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerRace(lv_itPlayer) == "ZHBR")) {
            libNtve_gf_HideGameUI(false, libZHBR_gv_playerGroupFromPlayer[lv_itPlayer]);
            PlayerSetRace(lv_itPlayer, "Neut");
            PlayerSetRace(lv_itPlayer, "ZHBR");
            PlayerSetCommander(lv_itPlayer, "ZHBRCommon");
            TechTreeUpgradeAddLevel(lv_itPlayer, "ZHBRSpray", 1);
            libNtve_gf_HideGameUI(true, libZHBR_gv_playerGroupFromPlayer[lv_itPlayer]);
            libZHBR_gf_RaceControlCreateUnit(lv_itPlayer);
        }

    }
    TriggerExecute(libZHBR_gt_HybridSuppressingRegeneration, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_InitializeHybrids_Init () {
    libZHBR_gt_InitializeHybrids = TriggerCreate("libZHBR_gt_InitializeHybrids_Func");
    TriggerAddEventGeneric(libZHBR_gt_InitializeHybrids, "GAME START ZHBR");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Control - Unit Selection
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_RaceControlUnitSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unitgroup lv_unitGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventPlayer() == lv_owner))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsSelected(libZHBR_gv_raceControlUnit[lv_owner], lv_owner) == false)) {
        UISetCommandAllowed(libZHBR_gv_playerGroupFromPlayer[lv_owner], c_uiCommandAllowSmartClick, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_RaceControlUnitSelection_Init () {
    libZHBR_gt_RaceControlUnitSelection = TriggerCreate("libZHBR_gt_RaceControlUnitSelection_Func");
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[0]"), 0, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[1]"), 1, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[2]"), 2, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[3]"), 3, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[4]"), 4, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[5]"), 5, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[6]"), 6, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[7]"), 7, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[8]"), 8, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[9]"), 9, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[10]"), 10, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[11]"), 11, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[12]"), 12, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[13]"), 13, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[14]"), 14, false);
    TriggerAddEventUnitSelected(libZHBR_gt_RaceControlUnitSelection, UnitRefFromVariable("libZHBR_gv_raceControlUnit[15]"), 15, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Control - Button Initialization
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_RaceControlButtonInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    playergroup auto4D69A9AD_g;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libZHBR_gv_raceControlButton == c_invalidDialogControlId))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/RaceControlButton");
    libZHBR_gv_raceControlButton = DialogControlLastCreated();
    libNtve_gf_SetDialogItemHotkey(DialogControlLastCreated(), c_hotkeyWarpIn, PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeSelectedOrObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    auto4D69A9AD_g = PlayerGroupAll();
    lv_itPlayer = -1;
    while (true) {
        lv_itPlayer = PlayerGroupNextPlayer(auto4D69A9AD_g, lv_itPlayer);
        if (lv_itPlayer < 0) { break; }
        if ((PlayerRace(lv_itPlayer) == "ZHBR")) {
            DialogControlSetVisible(DialogControlLastCreated(), libZHBR_gv_playerGroupFromPlayer[lv_itPlayer], true);
        }

    }
    TriggerEnable(libZHBR_gt_RaceControlButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_RaceControlButtonInitialization_Init () {
    libZHBR_gt_RaceControlButtonInitialization = TriggerCreate("libZHBR_gt_RaceControlButtonInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Control - Button Used
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_RaceControlButtonUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_unitGroup;
    int lv_requestedPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    string autoC1646AA6_val;
    unitgroup autoDB1923C5_g;
    int autoDB1923C5_u;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libZHBR_gv_raceControlButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_requestedPlayer = EventPlayer();
    autoC1646AA6_val = PlayerRace(lv_requestedPlayer);
    if (autoC1646AA6_val == "ZHBR") {
        autoDB1923C5_g = UnitGetTrackedUnitGroup(null, "ZHBRRaceControl@UnitTracker");
        autoDB1923C5_u = UnitGroupCount(autoDB1923C5_g, c_unitCountAll);
        for (;; autoDB1923C5_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoDB1923C5_g, autoDB1923C5_u);
            if (lv_itUnit == null) { break; }
            if ((UnitGetOwner(lv_itUnit) == lv_requestedPlayer) && ((UnitGetType(lv_itUnit) == "ZHBRRaceControl") || (UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeStructure) == true) || (UnitTypeTestFlag(UnitGetType(lv_itUnit), c_unitFlagWorker) == true))) {
                UnitGroupAdd(lv_unitGroup, lv_itUnit);
            }

        }
        UnitClearSelection(lv_requestedPlayer);
        UnitGroupSelect(lv_unitGroup, lv_requestedPlayer, true);
        UISetCommandAllowed(libZHBR_gv_playerGroupFromPlayer[lv_requestedPlayer], c_uiCommandAllowSmartClick, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_RaceControlButtonUsed_Init () {
    libZHBR_gt_RaceControlButtonUsed = TriggerCreate("libZHBR_gt_RaceControlButtonUsed_Func");
    TriggerEnable(libZHBR_gt_RaceControlButtonUsed, false);
    TriggerAddEventDialogControl(libZHBR_gt_RaceControlButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(libZHBR_gt_RaceControlButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
    TriggerAddEventDialogControl(libZHBR_gt_RaceControlButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeDoubleClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Suppressing Regeneration
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridSuppressingRegeneration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA8868461_g;
    int autoA8868461_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA8868461_g = PlayerGroupAll();
    autoA8868461_var = -1;
    while (true) {
        autoA8868461_var = PlayerGroupNextPlayer(autoA8868461_g, autoA8868461_var);
        if (autoA8868461_var < 0) { break; }
        PlayerAddResponse(autoA8868461_var, "ZHBRVoid@DamageResponse");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridSuppressingRegeneration_Init () {
    libZHBR_gt_HybridSuppressingRegeneration = TriggerCreate("libZHBR_gt_HybridSuppressingRegeneration_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Build Controller
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridBuildController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_minion;
    int lv_owner;
    point lv_targetPoint;
    unit lv_targetUnit;
    order lv_order;
    order lv_buildOrder;
    order lv_closestBuildOrder;
    order[libZHBR_gv_hybridBuildControllerMaxOrderCount_C + 1] lv_orderList;
    int lv_itOrder;
    int lv_closestBuildIndex;
    int lv_minionOrderCount;
    bool lv_pointVisible;
    order[libZHBR_gv_hybridBuildControllerMaxOrderCount_C + 1] lv_reservedOrders;
    int lv_unusedBuildIndex;
    int lv_lastMoveOrder;
    int lv_lastMoveOrder2;

    // Automatic Variable Declarations
    int auto97C0BB17_ae;
    const int auto97C0BB17_ai = 1;
    int autoC3E912D8_ae;
    const int autoC3E912D8_ai = 1;
    const int autoD5C3EB3E_ae = libZHBR_gv_hybridBuildControllerMaxOrderCount_C;
    const int autoD5C3EB3E_ai = 1;
    int autoFBF0360A_ae;
    const int autoFBF0360A_ai = 1;
    int auto37E899D8_ae;
    const int auto37E899D8_ai = 1;
    int auto23B103CB_ae;
    const int auto23B103CB_ai = 1;
    const int autoDAF153BD_ae = libZHBR_gv_hybridBuildControllerMaxOrderCount_C;
    int autoDAF153BD_var;
    const int autoBC0C26FD_ae = libZHBR_gv_hybridBuildControllerMaxOrderCount_C;
    int autoBC0C26FD_var;
    int auto4BEB1BC3_ae;
    const int auto4BEB1BC3_ai = 1;
    int auto7C92EECB_ae;
    const int auto7C92EECB_ai = 1;
    int auto298824A1_ae;
    const int auto298824A1_ai = 1;
    int auto4386EE88_ae;
    const int auto4386EE88_ai = 1;
    int autoFD9B2BF2_ae;
    const int autoFD9B2BF2_ai = 1;
    int auto5CA3468C_ae;
    const int auto5CA3468C_ai = 1;
    int auto8F6F669C_ae;
    const int auto8F6F669C_ai = 1;
    const int autoFCB06B8A_ae = libZHBR_gv_hybridBuildControllerMaxOrderCount_C;
    const int autoFCB06B8A_ai = 1;

    // Variable Initialization
    lv_closestBuildIndex = -1;
    lv_unusedBuildIndex = -1;
    lv_lastMoveOrder = -1;
    lv_lastMoveOrder2 = -1;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "ZHBRMinionBuild@InProgress") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "ZHBRMinionBuild@InProgress", EventUnit(), 1);
    lv_buildOrder = EventUnitOrder();
    lv_minion = EventUnit();
    lv_owner = UnitGetOwner(lv_minion);
    lv_targetPoint = OrderGetTargetPosition(lv_buildOrder);
    if ((OrderGetTargetType(EventUnitOrder()) == c_orderTargetUnit)) {
        lv_targetUnit = OrderGetTargetUnit(lv_buildOrder);
        if ((lv_targetUnit == null)) {
            lv_targetUnit = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(lv_targetPoint, 0.125), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        }

    }

    while (((OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("ZHBRMinionHarvest", 0)) || (OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("ZHBRMinionHarvest", 1)))) {
        Wait(0.0625, c_timeGame);
    }
    lv_minionOrderCount = UnitOrderCount(lv_minion);
    auto97C0BB17_ae = (lv_minionOrderCount-1);
    lv_itOrder = 0;
    for ( ; ( (auto97C0BB17_ai >= 0 && lv_itOrder <= auto97C0BB17_ae) || (auto97C0BB17_ai < 0 && lv_itOrder >= auto97C0BB17_ae) ) ; lv_itOrder += auto97C0BB17_ai ) {
        lv_orderList[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
        libZHBR_gv_dEBUGOrderListBefore[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
        if ((lv_closestBuildIndex == -1) && (lv_orderList[lv_itOrder] == lv_buildOrder)) {
            lv_closestBuildIndex = lv_itOrder;
            lv_buildOrder = lv_orderList[lv_closestBuildIndex];
            lv_targetPoint = OrderGetTargetPosition(lv_buildOrder);
            if ((OrderGetTargetType(lv_buildOrder) == c_orderTargetPoint)) {
                lv_targetUnit = null;
            }
            else {
                lv_targetUnit = OrderGetTargetUnit(lv_buildOrder);
                if ((lv_targetUnit == null)) {
                    lv_targetUnit = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(lv_targetPoint, 0.125), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
                }

            }
        }

    }
    autoC3E912D8_ae = (lv_minionOrderCount-1);
    lv_itOrder = 0;
    for ( ; ( (autoC3E912D8_ai >= 0 && lv_itOrder <= autoC3E912D8_ae) || (autoC3E912D8_ai < 0 && lv_itOrder >= autoC3E912D8_ae) ) ; lv_itOrder += autoC3E912D8_ai ) {
        if ((lv_itOrder == 0) && (lv_itOrder != lv_closestBuildIndex)) {
            if ((libZHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                if ((lv_targetUnit == null)) {
                    UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueReplace);
                }
            }
            else {
                UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueReplace);
            }
        }
        else if ((lv_itOrder == lv_closestBuildIndex)) {
            if ((lv_itOrder == 0)) {
                if ((libZHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                    }
                }
                else {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                }
            }
            else {
                if ((libZHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetPoint), c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), lv_targetUnit), c_orderQueueAddToEnd);
                        }
                    }
                }
                else {
                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                    else {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                    }
                }
            }
        }
        else if ((lv_itOrder != 0) && (lv_itOrder != lv_closestBuildIndex)) {
            if ((libZHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                    UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                }
                else {
                    UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetUnit(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                }
            }
            else {
                UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
            }
        }
    }
    while (true) {
        if (((UnitHasBehavior2(lv_minion, "ZHBRMinionBuild@InProgress") == false) || (UnitIsAlive(lv_minion) == false) || (libZHBR_gf_HybridBuildControllerClosestMainBuildAbilityCommandIndex(lv_minion) == -1))) {
            UnitBehaviorRemove(lv_minion, "ZHBRMinionBuild@InProgress", 1);
            return true;
        }

        lv_itOrder = 0;
        for ( ; ( (autoD5C3EB3E_ai >= 0 && lv_itOrder <= autoD5C3EB3E_ae) || (autoD5C3EB3E_ai < 0 && lv_itOrder >= autoD5C3EB3E_ae) ) ; lv_itOrder += autoD5C3EB3E_ai ) {
            lv_orderList[lv_itOrder] = null;
            libZHBR_gv_dEBUGOrderListAfter[lv_itOrder] = null;
        }
        lv_minionOrderCount = (UnitOrderCount(lv_minion)-1);
        autoFBF0360A_ae = lv_minionOrderCount;
        lv_itOrder = 0;
        for ( ; ( (autoFBF0360A_ai >= 0 && lv_itOrder <= autoFBF0360A_ae) || (autoFBF0360A_ai < 0 && lv_itOrder >= autoFBF0360A_ae) ) ; lv_itOrder += autoFBF0360A_ai ) {
            lv_orderList[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
            libZHBR_gv_dEBUGOrderListAfter[lv_itOrder] = lv_orderList[lv_itOrder];
        }
        lv_closestBuildIndex = libZHBR_gf_HybridBuildControllerClosestMainBuildAbilityCommandIndex(lv_minion);
        lv_buildOrder = lv_orderList[lv_closestBuildIndex];
        lv_targetPoint = OrderGetTargetPosition(lv_buildOrder);
        auto37E899D8_ae = (libZHBR_gv_hybridBuildControllerMaxOrderCount_C-1);
        lv_itOrder = 0;
        for ( ; ( (auto37E899D8_ai >= 0 && lv_itOrder <= auto37E899D8_ae) || (auto37E899D8_ai < 0 && lv_itOrder >= auto37E899D8_ae) ) ; lv_itOrder += auto37E899D8_ai ) {
            if ((OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0)) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_itOrder+1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, 0)) == OrderGetTargetPosition(UnitOrder(lv_minion, (lv_itOrder+1))))) {
                lv_lastMoveOrder = lv_itOrder;
            }

        }
        if ((lv_lastMoveOrder != -1)) {
            UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            auto23B103CB_ae = lv_minionOrderCount;
            lv_itOrder = (lv_lastMoveOrder+1);
            for ( ; ( (auto23B103CB_ai >= 0 && lv_itOrder <= auto23B103CB_ae) || (auto23B103CB_ai < 0 && lv_itOrder >= auto23B103CB_ae) ) ; lv_itOrder += auto23B103CB_ai ) {
                UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
            }
            lv_lastMoveOrder = -1;
        }

        if (((lv_closestBuildIndex == 0) || (lv_closestBuildIndex == 1))) {
            libZHBR_gv_dEBUGFirstOrder = UnitOrder(lv_minion, 0);
            if ((OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0))) {
                if ((CliffLevel(UnitGetPosition(lv_minion)) >= CliffLevel(lv_targetPoint))) {
                    if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, 0)) == OrderGetTargetPosition(UnitOrder(lv_minion, 1)))) {
                        UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        UnitIssueOrder(lv_minion, lv_buildOrder, c_orderQueueReplace);
                        auto7C92EECB_ae = lv_minionOrderCount;
                        lv_itOrder = (lv_closestBuildIndex+1);
                        for ( ; ( (auto7C92EECB_ai >= 0 && lv_itOrder <= auto7C92EECB_ae) || (auto7C92EECB_ai < 0 && lv_itOrder >= auto7C92EECB_ae) ) ; lv_itOrder += auto7C92EECB_ai ) {
                            if ((libZHBR_gf_HybridBuildControllerIsBuildOrderMain(lv_orderList[lv_itOrder]) == true)) {
                                if ((CliffLevel(UnitGetPosition(lv_minion)) < CliffLevel(lv_targetPoint))) {
                                    if ((lv_itOrder > 0) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_itOrder-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_itOrder-1))) == OrderGetTargetPosition(UnitOrder(lv_minion, lv_itOrder)))) {
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                    }
                                }

                                if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                    UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                }
                                else {
                                    UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                }
                            }
                            else {
                                if ((libZHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetUnit(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                    }
                                }
                                else {
                                    UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                }
                            }
                        }
                    }

                }
                else {
                    if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, 0)) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, 0)) == OrderGetTargetPosition(UnitOrder(lv_minion, 1)))) {
                        if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == true)) {
                            UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            UnitIssueOrder(lv_minion, lv_buildOrder, c_orderQueueReplace);
                            auto4BEB1BC3_ae = lv_minionOrderCount;
                            lv_itOrder = (lv_closestBuildIndex+1);
                            for ( ; ( (auto4BEB1BC3_ai >= 0 && lv_itOrder <= auto4BEB1BC3_ae) || (auto4BEB1BC3_ai < 0 && lv_itOrder >= auto4BEB1BC3_ae) ) ; lv_itOrder += auto4BEB1BC3_ai ) {
                                if ((libZHBR_gf_HybridBuildControllerIsBuildOrderMain(lv_orderList[lv_itOrder]) == true)) {
                                    if ((CliffLevel(UnitGetPosition(lv_minion)) < CliffLevel(lv_targetPoint))) {
                                        if ((lv_itOrder > 0) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_itOrder-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_itOrder-1))) == OrderGetTargetPosition(UnitOrder(lv_minion, lv_itOrder)))) {
                                        }
                                        else {
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        }
                                    }

                                    if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                        UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                    }
                                }
                                else {
                                    if ((libZHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                                        if ((OrderGetTargetType(lv_orderList[lv_itOrder]) == c_orderTargetPoint)) {
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetPoint(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        }
                                        else {
                                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPosition(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_itOrder]), OrderGetTargetUnit(lv_orderList[lv_itOrder])), c_orderQueueAddToEnd);
                                        }
                                    }
                                    else {
                                        UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                                    }
                                }
                            }
                        }
                        else {
                            if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == OrderGetTargetPosition(lv_buildOrder))) {
                            }
                            else {
                                autoDAF153BD_var = 0;
                                for ( ; autoDAF153BD_var <= autoDAF153BD_ae; autoDAF153BD_var += 1 ) {
                                    lv_reservedOrders[autoDAF153BD_var] = UnitOrder(lv_minion, autoDAF153BD_var);
                                }
                                UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                                autoBC0C26FD_var = 0;
                                for ( ; autoBC0C26FD_var <= autoBC0C26FD_ae; autoBC0C26FD_var += 1 ) {
                                    if ((lv_closestBuildIndex == autoBC0C26FD_var)) {
                                        UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_buildOrder)), c_orderQueueAddToEnd);
                                    }

                                    UnitIssueOrder(lv_minion, lv_reservedOrders[autoBC0C26FD_var], c_orderQueueAddToEnd);
                                }
                            }
                        }
                    }

                }
            }
            else {
                if ((VisIsVisibleForPlayer(lv_owner, lv_targetPoint) == false)) {
                    if ((lv_closestBuildIndex == 1) && (OrderGetAbilityCommand(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == AbilityCommand("move", 0)) && (OrderGetTargetPosition(UnitOrder(lv_minion, (lv_closestBuildIndex-1))) == OrderGetTargetPosition(lv_buildOrder))) {
                    }
                    else {
                        if ((CliffLevel(UnitGetPosition(lv_minion)) < CliffLevel(lv_targetPoint))) {
                            auto5CA3468C_ae = (libZHBR_gv_hybridBuildControllerMaxOrderCount_C-1);
                            lv_itOrder = 0;
                            for ( ; ( (auto5CA3468C_ai >= 0 && lv_itOrder <= auto5CA3468C_ae) || (auto5CA3468C_ai < 0 && lv_itOrder >= auto5CA3468C_ae) ) ; lv_itOrder += auto5CA3468C_ai ) {
                                lv_reservedOrders[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
                            }
                            UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            auto8F6F669C_ae = (libZHBR_gv_hybridBuildControllerMaxOrderCount_C-1);
                            lv_itOrder = 0;
                            for ( ; ( (auto8F6F669C_ai >= 0 && lv_itOrder <= auto8F6F669C_ae) || (auto8F6F669C_ai < 0 && lv_itOrder >= auto8F6F669C_ae) ) ; lv_itOrder += auto8F6F669C_ai ) {
                                if ((lv_closestBuildIndex == lv_itOrder)) {
                                    UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_buildOrder)), c_orderQueueAddToEnd);
                                }

                                UnitIssueOrder(lv_minion, lv_reservedOrders[lv_itOrder], c_orderQueueAddToEnd);
                            }
                        }

                    }
                }
                else {
                    auto298824A1_ae = lv_minionOrderCount;
                    lv_itOrder = (lv_closestBuildIndex+1);
                    for ( ; ( (auto298824A1_ai >= 0 && lv_itOrder <= auto298824A1_ae) || (auto298824A1_ai < 0 && lv_itOrder >= auto298824A1_ae) ) ; lv_itOrder += auto298824A1_ai ) {
                        if ((libZHBR_gf_HybridBuildControllerIsBuildOrder(lv_orderList[lv_itOrder]) == true)) {
                            lv_unusedBuildIndex = lv_itOrder;
                            break;
                        }

                    }
                    if ((lv_unusedBuildIndex != -1)) {
                        UnitIssueOrder(lv_minion, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                        auto4386EE88_ae = (lv_unusedBuildIndex-1);
                        lv_itOrder = 0;
                        for ( ; ( (auto4386EE88_ai >= 0 && lv_itOrder <= auto4386EE88_ae) || (auto4386EE88_ai < 0 && lv_itOrder >= auto4386EE88_ae) ) ; lv_itOrder += auto4386EE88_ai ) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        if ((OrderGetTargetType(lv_orderList[lv_unusedBuildIndex]) == c_orderTargetPoint)) {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(lv_orderList[lv_unusedBuildIndex])), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_unusedBuildIndex]), OrderGetTargetPoint(lv_orderList[lv_unusedBuildIndex])), c_orderQueueAddToEnd);
                        }
                        else {
                            UnitIssueOrder(lv_minion, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(OrderGetTargetUnit(lv_orderList[lv_unusedBuildIndex]))), c_orderQueueAddToEnd);
                            UnitIssueOrder(lv_minion, OrderTargetingUnit(libZHBR_gf_HybridBuildControllerReturnMainBuildAbilityCommand(lv_orderList[lv_unusedBuildIndex]), OrderGetTargetUnit(lv_orderList[lv_unusedBuildIndex])), c_orderQueueAddToEnd);
                        }
                        autoFD9B2BF2_ae = lv_minionOrderCount;
                        lv_itOrder = (lv_unusedBuildIndex+1);
                        for ( ; ( (autoFD9B2BF2_ai >= 0 && lv_itOrder <= autoFD9B2BF2_ae) || (autoFD9B2BF2_ai < 0 && lv_itOrder >= autoFD9B2BF2_ae) ) ; lv_itOrder += autoFD9B2BF2_ai ) {
                            UnitIssueOrder(lv_minion, lv_orderList[lv_itOrder], c_orderQueueAddToEnd);
                        }
                        lv_unusedBuildIndex = -1;
                    }

                }
            }
        }

        lv_itOrder = 0;
        for ( ; ( (autoFCB06B8A_ai >= 0 && lv_itOrder <= autoFCB06B8A_ae) || (autoFCB06B8A_ai < 0 && lv_itOrder >= autoFCB06B8A_ae) ) ; lv_itOrder += autoFCB06B8A_ai ) {
            libZHBR_gv_dEBUGOrderListAfter[lv_itOrder] = UnitOrder(lv_minion, lv_itOrder);
        }
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(lv_minion, "ZHBRMinionBuild@InProgress", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridBuildController_Init () {
    libZHBR_gt_HybridBuildController = TriggerCreate("libZHBR_gt_HybridBuildController_Func");
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 1));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 4));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 17));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 16));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 9));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 0));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 8));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 5));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 6));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 2));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 20));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 21));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 7));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 3));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 14));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 15));
    TriggerAddEventUnitOrder(libZHBR_gt_HybridBuildController, null, AbilityCommand("ZHBRMinionBuild", 18));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Start Set
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridTeleportStartSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_casterUnit;
    unit lv_targetUnit;
    int lv_owner;
    int lv_trigPlayer;
    int lv_itControlGroup;
    fixed lv_minimumLife;
    fixed lv_minimumShields;
    fixed lv_minimumEnergy;
    fixed lv_currentLife;
    fixed lv_currentShields;
    fixed lv_currentEnergy;
    fixed lv_percent;
    string lv_itBehavior;
    bool lv_hasPermanentPower;
    bool lv_hasVoidImmunity;

    // Automatic Variable Declarations
    const int auto148B0199_ae = 9;
    const int auto148B0199_ai = 1;

    // Variable Initialization
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_owner = UnitGetOwner(lv_casterUnit);
    lv_trigPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itControlGroup = 0;
    for ( ; ( (auto148B0199_ai >= 0 && lv_itControlGroup <= auto148B0199_ae) || (auto148B0199_ai < 0 && lv_itControlGroup >= auto148B0199_ae) ) ; lv_itControlGroup += auto148B0199_ai ) {
        if ((UnitGroupHasUnit(UnitControlGroup(lv_owner, lv_itControlGroup), lv_casterUnit) == true)) {
            UnitControlGroupAddUnit(lv_owner, lv_itControlGroup, lv_targetUnit);
        }

        if ((lv_trigPlayer != lv_owner)) {
            if ((UnitGroupHasUnit(UnitControlGroup(lv_trigPlayer, lv_itControlGroup), lv_casterUnit) == true)) {
                UnitControlGroupAddUnit(lv_trigPlayer, lv_itControlGroup, lv_targetUnit);
            }

        }

    }
    lv_minimumLife = UnitBehaviorEffectTreeUserData(lv_targetUnit, "ZHBRStructureTeleport@Controller", "StoredLife");
    lv_minimumShields = UnitBehaviorEffectTreeUserData(lv_targetUnit, "ZHBRStructureTeleport@Controller", "StoredShields");
    lv_minimumEnergy = UnitBehaviorEffectTreeUserData(lv_targetUnit, "ZHBRStructureTeleport@Controller", "StoredEnergy");
    lv_hasPermanentPower = (UnitBehaviorEffectTreeUserData(lv_targetUnit, "ZHBRStructureTeleport@Controller", "PermanentPower") > 0.0);
    lv_hasVoidImmunity = (UnitBehaviorEffectTreeUserData(lv_targetUnit, "ZHBRStructureTeleport@Controller", "VoidImmunity") > 0.0);
    UnitSetPropertyFixed(lv_targetUnit, c_unitPropLife, lv_minimumLife);
    UnitSetPropertyFixed(lv_targetUnit, c_unitPropShields, lv_minimumShields);
    UnitSetPropertyFixed(lv_targetUnit, c_unitPropEnergy, lv_minimumEnergy);
    lv_currentLife = lv_minimumLife;
    lv_currentShields = lv_minimumShields;
    lv_currentEnergy = lv_minimumEnergy;
    UnitSetPropertyFixed(lv_targetUnit, c_unitPropKills, UnitGetPropertyFixed(lv_casterUnit, c_unitPropKills, c_unitPropCurrent));
    while ((libNtve_gf_UnitIsUnderConstruction(lv_targetUnit) == true)) {
        lv_currentLife = UnitGetPropertyFixed(lv_targetUnit, c_unitPropLife, c_unitPropCurrent);
        lv_currentShields = UnitGetPropertyFixed(lv_targetUnit, c_unitPropShields, c_unitPropCurrent);
        lv_currentEnergy = UnitGetPropertyFixed(lv_targetUnit, c_unitPropEnergy, c_unitPropCurrent);
        lv_minimumLife = MinF(lv_currentLife, lv_minimumLife);
        lv_minimumShields = MinF(lv_currentShields, lv_minimumShields);
        lv_minimumEnergy = MinF(lv_currentEnergy, lv_minimumEnergy);
        if ((UnitHasBehavior2(lv_targetUnit, "ZHBRStructureTeleport@Controller") == true)) {
            lv_percent = (UnitBehaviorDuration(lv_targetUnit, "ZHBRStructureTeleport@Controller") / UnitBehaviorDurationTotal(lv_targetUnit, "ZHBRStructureTeleport@Controller"));
            lv_percent *= 100.0;
            lv_percent = (100.0 - lv_percent);
            UnitSetProgressComplete(lv_targetUnit, 1, FixedToInt(lv_percent));
        }

        UnitSetPropertyFixed(lv_targetUnit, c_unitPropLife, lv_minimumLife);
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropShields, lv_minimumShields);
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropEnergy, lv_minimumEnergy);
        Wait(0.0625, c_timeGame);
    }
    if (((UnitIsAlive(lv_targetUnit) == false) || (UnitIsValid(lv_targetUnit) == false))) {
        return true;
    }

    if ((lv_hasPermanentPower == true)) {
        UnitBehaviorAdd(lv_targetUnit, "ZHBRVoid@PowerUserPermanent", lv_targetUnit, 1);
        if ((UnitHasBehavior2(lv_targetUnit, "ZHBRVoid@PowerUserNetwork") == true)) {
            UnitBehaviorAdd(lv_targetUnit, "ZHBRVoid@PowerUserPermanentNetwork", lv_targetUnit, 1);
        }

        UnitBehaviorRemove(lv_targetUnit, "ZHBRVoid@PowerUser", 1);
        UnitBehaviorRemove(lv_targetUnit, "ZHBRVoid@PowerUserNetwork", 1);
    }

    if ((lv_hasVoidImmunity == true)) {
        UnitBehaviorAdd(lv_targetUnit, "ZHBRVoidImmunity", lv_targetUnit, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridTeleportStartSet_Init () {
    libZHBR_gt_HybridTeleportStartSet = TriggerCreate("libZHBR_gt_HybridTeleportStartSet_Func");
    TriggerAddEventPlayerEffectUsed(libZHBR_gt_HybridTeleportStartSet, c_playerAny, "ZHBRStructureTeleport@StartSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Finish Set
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridTeleportFinishSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;

    // Automatic Variable Declarations
    string autoFBD552CD_val;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    autoFBD552CD_val = UnitGetType(lv_targetUnit);
    if (autoFBD552CD_val == "ZHBRTemple") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Temple", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRHarvester") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Harvester", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRIonicCrystal") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@IonicCrystal", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRVoidRift") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@VoidRift", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRHoldingCell") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@HoldingCell", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRAmplifier") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Amplifier", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRVespeneConcentrator") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@VespeneConcentrator", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRStasisCell") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@StasisCell", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRConstruct@AntiAir") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@ConstructAntiAir", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRConstruct@AntiGround") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@ConstructAntiGround", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRDeformer") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Deformer", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRCrypt") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Crypt", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRTomb") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Tomb", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRKeystone") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Keystone", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRProjector") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Projector", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRCapsule") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@Capsule", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else if (autoFBD552CD_val == "ZHBRVoidForge") {
        UnitAbilitySpendExplicit(lv_targetUnit, AbilityCommand("ZHBRStructureTeleport@VoidForge", 0), c_spendLocationAll, 0.0, 0.0, 1.0, 1.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridTeleportFinishSet_Init () {
    libZHBR_gt_HybridTeleportFinishSet = TriggerCreate("libZHBR_gt_HybridTeleportFinishSet_Func");
    TriggerAddEventPlayerEffectUsed(libZHBR_gt_HybridTeleportFinishSet, c_playerAny, "ZHBRStructureTeleport@FinishSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Teleport - Targeting Update
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridTeleportTargetingUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn)) {
        libZHBR_gv_hybridTeleportTargetingUpdate[EventPlayer()] += 1;
    }
    else {
        libZHBR_gv_hybridTeleportTargetingUpdate[EventPlayer()] -= 1;
    }
    if ((libZHBR_gv_hybridTeleportTargetingUpdate[EventPlayer()] > 0)) {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZHBRStructureTeleport@Controller", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "ZHBRStructureTeleport@Controller", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridTeleportTargetingUpdate_Init () {
    libZHBR_gt_HybridTeleportTargetingUpdate = TriggerCreate("libZHBR_gt_HybridTeleportTargetingUpdate_Func");
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Amplifier", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Capsule", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport", 8), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport", 9), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Crypt", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Deformer", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Harvester", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@HoldingCell", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@IonicCrystal", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Keystone", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Projector", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@StasisCell", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Temple", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@Tomb", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@VespeneConcentrator", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@VoidForge", 0), c_targetModeStateAny);
    TriggerAddEventTargetModeUpdate(libZHBR_gt_HybridTeleportTargetingUpdate, c_playerAny, AbilityCommand("ZHBRStructureTeleport@VoidRift", 0), c_targetModeStateAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Amplifier - Construction
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridAmplifierConstruction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_amplifier;
    unit lv_mineralField;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "ZHBRAmplifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amplifier = EventUnitProgressUnit();
    lv_mineralField = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_amplifier), 0.5), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    UnitCreateEffectUnit(lv_amplifier, "ZHBRMineralMining@ApplySuppressionBehavior", lv_mineralField);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridAmplifierConstruction_Init () {
    libZHBR_gt_HybridAmplifierConstruction = TriggerCreate("libZHBR_gt_HybridAmplifierConstruction_Func");
    TriggerAddEventUnitConstructProgress(libZHBR_gt_HybridAmplifierConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Amplifier - Construction Completed
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridAmplifierConstructionCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_amplifier;
    unit lv_mineralField;
    string lv_resourceBehavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "ZHBRAmplifier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amplifier = EventUnitProgressUnit();
    lv_mineralField = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_amplifier), 0.5), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if (((UnitGetType(lv_mineralField) == "BattleStationMineralField") || (UnitGetType(lv_mineralField) == "LabMineralField") || (UnitGetType(lv_mineralField) == "MineralField") || (UnitGetType(lv_mineralField) == "PurifierMineralField"))) {
        lv_resourceBehavior = "MineralsMineralField1800NoWorker";
    }
    else if (((UnitGetType(lv_mineralField) == "MineralFieldOpaque"))) {
        lv_resourceBehavior = "MineralsMineralFieldOpaqueNoWorker1800";
    }
    else if (((UnitGetType(lv_mineralField) == "MineralFieldOpaque900"))) {
        lv_resourceBehavior = "MineralsMineralFieldOpaque900NoWorker";
    }
    else if (((UnitGetType(lv_mineralField) == "BattleStationMineralField750") || (UnitGetType(lv_mineralField) == "LabMineralField750") || (UnitGetType(lv_mineralField) == "MineralField750") || (UnitGetType(lv_mineralField) == "PurifierMineralField750"))) {
        lv_resourceBehavior = "MineralsMineralField900NoWorker";
    }
    else if (((UnitGetType(lv_mineralField) == "MineralField450"))) {
        lv_resourceBehavior = "MineralsMineralField450NoWorker";
    }
    else if (((UnitGetType(lv_mineralField) == "PurifierRichMineralField") || (UnitGetType(lv_mineralField) == "RichMineralField"))) {
        lv_resourceBehavior = "MineralsHighYieldNoWorker";
    }
    else if (((UnitGetType(lv_mineralField) == "PurifierRichMineralField750") || (UnitGetType(lv_mineralField) == "RichMineralField750"))) {
        lv_resourceBehavior = "MineralsHighYield900NoWorker";
    }
    UnitBehaviorAdd(lv_amplifier, lv_resourceBehavior, lv_amplifier, 1);
    UnitCreate(1, "ZHBRAmplifier@PathingBlocker", c_unitCreateIgnorePlacement, UnitGetOwner(lv_amplifier), UnitGetPosition(lv_amplifier), 270.0);
    UnitCreateEffectUnit(lv_amplifier, "ZHBRAmplifier@ApplyPathingBlockerController", UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridAmplifierConstructionCompleted_Init () {
    libZHBR_gt_HybridAmplifierConstructionCompleted = TriggerCreate("libZHBR_gt_HybridAmplifierConstructionCompleted_Func");
    TriggerAddEventUnitConstructProgress(libZHBR_gt_HybridAmplifierConstructionCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Void Rift - Ping Handler
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_VoidRiftPingHandler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        libNtve_gf_CreatePingFacingAngle(libZHBR_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())], "PingTriangle", UnitGetPosition(EventUnit()), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.5);
        PingSetUnit(PingLastCreated(), EventUnit());
        libZHBR_gf_StorePingForUnit(EventUnit(), 1, PingLastCreated());
    }
    else {
        PingSetScale(libZHBR_gf_PingStoredForUnit(EventUnit(), 1), 0.01);
        PingDestroy(libZHBR_gf_PingStoredForUnit(EventUnit(), 1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_VoidRiftPingHandler_Init () {
    libZHBR_gt_VoidRiftPingHandler = TriggerCreate("libZHBR_gt_VoidRiftPingHandler_Func");
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_VoidRiftPingHandler, null, "ZHBRPrimeSummoning@Controller", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_VoidRiftPingHandler, null, "ZHBRPrimeSummoning@Controller", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Stasis Cell Connection
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridStasisCellConnection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        libZHBR_gv_hybridStasisCellConnection[0] += 1;
    }
    else {
        libZHBR_gv_hybridStasisCellConnection[0] -= 1;
    }
    if ((libZHBR_gv_hybridStasisCellConnection[0] >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "ZHBRStasisCell@Connection", 1);
    }
    else {
        if ((libZHBR_gv_hybridStasisCellConnection[0] < 0)) {
            libZHBR_gv_hybridStasisCellConnection[0] = 0;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "ZHBRStasisCell@Connection", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridStasisCellConnection_Init () {
    libZHBR_gt_HybridStasisCellConnection = TriggerCreate("libZHBR_gt_HybridStasisCellConnection_Func");
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridStasisCellConnection, null, "ZHBRStasisCell@Connection", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridStasisCellConnection, null, "ZHBRStasisCell@Connection", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Keystone Connection
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridKeystoneConnection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        libZHBR_gv_hybridKeystoneConnection[lv_owner] += 1;
    }
    else {
        libZHBR_gv_hybridKeystoneConnection[lv_owner] -= 1;
    }
    if ((libZHBR_gv_hybridKeystoneConnection[lv_owner] >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "ZHBRKeystone@Connection", 1);
    }
    else {
        if ((libZHBR_gv_hybridKeystoneConnection[lv_owner] < 0)) {
            libZHBR_gv_hybridKeystoneConnection[lv_owner] = 0;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "ZHBRKeystone@Connection", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridKeystoneConnection_Init () {
    libZHBR_gt_HybridKeystoneConnection = TriggerCreate("libZHBR_gt_HybridKeystoneConnection_Func");
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridKeystoneConnection, null, "ZHBRKeystone@Connection", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridKeystoneConnection, null, "ZHBRKeystone@Connection", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Projector Connection
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridProjectorConnection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        libZHBR_gv_hybridProjectorConnection[lv_owner] += 1;
    }
    else {
        libZHBR_gv_hybridProjectorConnection[lv_owner] -= 1;
    }
    if ((libZHBR_gv_hybridProjectorConnection[lv_owner] >= 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "ZHBRProjector@Connection", 1);
    }
    else {
        if ((libZHBR_gv_hybridProjectorConnection[lv_owner] < 0)) {
            libZHBR_gv_hybridProjectorConnection[lv_owner] = 0;
        }

        libNtve_gf_SetUpgradeLevelForPlayer(lv_owner, "ZHBRProjector@Connection", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridProjectorConnection_Init () {
    libZHBR_gt_HybridProjectorConnection = TriggerCreate("libZHBR_gt_HybridProjectorConnection_Func");
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridProjectorConnection, null, "ZHBRProjector@Connection", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridProjectorConnection, null, "ZHBRProjector@Connection", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Vespene Concentrator - Construction Completed
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridVespeneConcentratorConstructionCompleted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_concentrator;
    unit lv_geyser;
    string lv_resourceBehavior;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitProgressUnit()) == "ZHBRVespeneConcentrator"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_concentrator = EventUnitProgressUnit();
    lv_geyser = UnitGroupUnit(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_concentrator), 0.5), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
    if (((UnitGetType(EventUnit()) == "RichVespeneGeyser"))) {
        lv_resourceBehavior = "RawRichVespeneGeyserGas";
    }
    else if (true) {
        lv_resourceBehavior = "RawVespeneGeyserGas";
    }
    UnitBehaviorAdd(lv_concentrator, lv_resourceBehavior, lv_concentrator, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridVespeneConcentratorConstructionCompleted_Init () {
    libZHBR_gt_HybridVespeneConcentratorConstructionCompleted = TriggerCreate("libZHBR_gt_HybridVespeneConcentratorConstructionCompleted_Func");
    TriggerAddEventUnitConstructProgress(libZHBR_gt_HybridVespeneConcentratorConstructionCompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Shapeshifter - Void Chasm
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridShapeshifterVoidChasm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_hightStep;
    int lv_periodCount;
    unit lv_targetUnit;

    // Automatic Variable Declarations
    int auto5802BA95_n;
    int auto5802BA95_i;

    // Variable Initialization
    lv_periodCount = 6;
    lv_targetUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_hightStep = (UnitGetHeight(lv_targetUnit)/lv_periodCount);
        lv_hightStep *= -1.0;
    }
    else {
        lv_hightStep = (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, UnitGetType(lv_targetUnit), "Height", c_playerAny)/lv_periodCount);
    }
    auto5802BA95_n = lv_periodCount;
    for (auto5802BA95_i = 1; auto5802BA95_i <= auto5802BA95_n; auto5802BA95_i += 1) {
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropHeight, (UnitGetHeight(lv_targetUnit) + lv_hightStep));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridShapeshifterVoidChasm_Init () {
    libZHBR_gt_HybridShapeshifterVoidChasm = TriggerCreate("libZHBR_gt_HybridShapeshifterVoidChasm_Func");
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridShapeshifterVoidChasm, null, "ZHBRVoidChasm", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libZHBR_gt_HybridShapeshifterVoidChasm, null, "ZHBRVoidChasm", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Nemesis - Weapon
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridNemesisWeapon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nemesis;
    fixed lv_weaponCooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nemesis = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_weaponCooldown = (UnitWeaponPeriod(lv_nemesis, 1) * 0.0625);
    lv_weaponCooldown *= UnitWeaponSpeedMultiplier(lv_nemesis, 1);
    if ((lv_weaponCooldown <= 0.0)) {
        UnitBehaviorRemove(lv_nemesis, "ZHBRNemesisWeapon@CD", 1);
    }
    else {
        lv_weaponCooldown = MaxF(lv_weaponCooldown, 0.0625);
        UnitBehaviorSetDurationRemaining(lv_nemesis, "ZHBRNemesisWeapon@CD", lv_weaponCooldown);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridNemesisWeapon_Init () {
    libZHBR_gt_HybridNemesisWeapon = TriggerCreate("libZHBR_gt_HybridNemesisWeapon_Func");
    TriggerAddEventPlayerEffectUsed(libZHBR_gt_HybridNemesisWeapon, c_playerAny, "ZHBRNemesisWeapon@ApplyCooldown");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Navigator - Cargo UI
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridNavigatorCargoUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_navigator;
    int lv_spaceUsed;
    unit lv_itCargoUnit;
    int[5] lv_cargoSizePerUnit;
    int lv_itSegment;
    int lv_unitStatusBar;
    int lv_itCargoSizeType;
    int lv_itCargoSize;
    int lv_lastUsedSegment;
    int lv_oldUsedSegment;
    int lv_size;
    int lv_totalCargoSpace;

    // Automatic Variable Declarations
    int auto7DAAF028_ae;
    const int auto7DAAF028_ai = 1;
    unitgroup auto5DBF8F08_g;
    int auto5DBF8F08_u;
    int auto80646994_val;
    const int auto122D3DC0_ae = 1;
    const int auto122D3DC0_ai = -1;
    int autoE07583AE_val;
    int auto7D642D40_ae;
    const int auto7D642D40_ai = 1;
    int auto24F9E6FA_ae;
    const int auto24F9E6FA_ai = 1;

    // Variable Initialization
    lv_unitStatusBar = c_invalidDialogControlId;
    lv_oldUsedSegment = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZHBRNavigator"))) {
            return false;
        }

        if (!((UnitIsValid(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_navigator = EventUnit();
    lv_spaceUsed = UnitCargoValue(lv_navigator, c_unitCargoSpaceUsed);
    lv_totalCargoSpace = CatalogFieldValueGetAsInt(c_gameCatalogAbil, ("ZHBRNavigatorLoad"), "TotalCargoSpace", UnitGetOwner(lv_navigator));
    DialogControlHookupUnitStatus(c_triggerControlTypeProgressBar, "CustomCargoBar", lv_navigator);
    lv_unitStatusBar = DialogControlLastCreated();
    libNtve_gf_SetDialogItemCurrentValue(lv_unitStatusBar, UnitCargoValue(lv_navigator, c_unitCargoSpaceUsed), PlayerGroupAll());
    auto7DAAF028_ae = (lv_totalCargoSpace - 1);
    lv_itSegment = 1;
    for ( ; ( (auto7DAAF028_ai >= 0 && lv_itSegment <= auto7DAAF028_ae) || (auto7DAAF028_ai < 0 && lv_itSegment >= auto7DAAF028_ae) ) ; lv_itSegment += auto7DAAF028_ai ) {
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, ("CustomCargoBar/Segmentator/Segment" + IntToString(lv_itSegment)), lv_navigator);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }
    auto5DBF8F08_g = UnitCargoGroup(lv_navigator);
    auto5DBF8F08_u = UnitGroupCount(auto5DBF8F08_g, c_unitCountAll);
    for (;; auto5DBF8F08_u -= 1) {
        lv_itCargoUnit = UnitGroupUnitFromEnd(auto5DBF8F08_g, auto5DBF8F08_u);
        if (lv_itCargoUnit == null) { break; }
        auto80646994_val = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lv_itCargoUnit), "CargoSize", c_playerAny);
        if (auto80646994_val == 1) {
            lv_cargoSizePerUnit[libZHBR_ge_HybridNavigatorCargoUI_Size1] += 1;
        }
        else if (auto80646994_val == 2) {
            lv_cargoSizePerUnit[libZHBR_ge_HybridNavigatorCargoUI_Size2] += 1;
        }
        else if (auto80646994_val == 4) {
            lv_cargoSizePerUnit[libZHBR_ge_HybridNavigatorCargoUI_Size4] += 1;
        }
        else if (auto80646994_val == 8) {
            lv_cargoSizePerUnit[libZHBR_ge_HybridNavigatorCargoUI_Size8] += 1;
        }
        else {
        }
    }
    lv_itCargoSizeType = 4;
    for ( ; ( (auto122D3DC0_ai >= 0 && lv_itCargoSizeType <= auto122D3DC0_ae) || (auto122D3DC0_ai < 0 && lv_itCargoSizeType >= auto122D3DC0_ae) ) ; lv_itCargoSizeType += auto122D3DC0_ai ) {
        if ((lv_cargoSizePerUnit[lv_itCargoSizeType] > 0)) {
            autoE07583AE_val = lv_itCargoSizeType;
            if (autoE07583AE_val == libZHBR_ge_HybridNavigatorCargoUI_Size1) {
                lv_size = 1;
            }
            else if (autoE07583AE_val == libZHBR_ge_HybridNavigatorCargoUI_Size2) {
                lv_size = 2;
            }
            else if (autoE07583AE_val == libZHBR_ge_HybridNavigatorCargoUI_Size4) {
                lv_size = 4;
            }
            else if (autoE07583AE_val == libZHBR_ge_HybridNavigatorCargoUI_Size8) {
                lv_size = 8;
            }
            else {
            }
            auto7D642D40_ae = lv_cargoSizePerUnit[lv_itCargoSizeType];
            lv_itCargoSize = 1;
            for ( ; ( (auto7D642D40_ai >= 0 && lv_itCargoSize <= auto7D642D40_ae) || (auto7D642D40_ai < 0 && lv_itCargoSize >= auto7D642D40_ae) ) ; lv_itCargoSize += auto7D642D40_ai ) {
                lv_lastUsedSegment = (lv_lastUsedSegment + lv_size);
                if ((lv_size > 1)) {
                    auto24F9E6FA_ae = (lv_lastUsedSegment-1);
                    lv_itSegment = lv_oldUsedSegment;
                    for ( ; ( (auto24F9E6FA_ai >= 0 && lv_itSegment <= auto24F9E6FA_ae) || (auto24F9E6FA_ai < 0 && lv_itSegment >= auto24F9E6FA_ae) ) ; lv_itSegment += auto24F9E6FA_ai ) {
                        DialogControlHookupUnitStatus(c_triggerControlTypeImage, ("CustomCargoBar/Segmentator/Segment" + IntToString(lv_itSegment)), lv_navigator);
                        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
                        lv_oldUsedSegment = (lv_lastUsedSegment+1);
                    }
                }

                if ((lv_lastUsedSegment == 8)) {
                    return true;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridNavigatorCargoUI_Init () {
    libZHBR_gt_HybridNavigatorCargoUI = TriggerCreate("libZHBR_gt_HybridNavigatorCargoUI_Func");
    TriggerAddEventUnitCargo(libZHBR_gt_HybridNavigatorCargoUI, null, true);
    TriggerAddEventUnitCargo(libZHBR_gt_HybridNavigatorCargoUI, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Psyon - Weapon
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridPsyonWeapon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psyon;
    fixed lv_weaponCooldown;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_psyon = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_weaponCooldown = (UnitWeaponPeriod(lv_psyon, 1) * 0.0625);
    lv_weaponCooldown *= UnitWeaponSpeedMultiplier(lv_psyon, 1);
    if ((lv_weaponCooldown <= 0.0)) {
        UnitBehaviorRemove(lv_psyon, "ZHBRPsyonWeapon@Cooldown", 1);
    }
    else {
        lv_weaponCooldown = MaxF(lv_weaponCooldown, 0.0625);
        UnitBehaviorSetDurationRemaining(lv_psyon, "ZHBRPsyonWeapon@Cooldown", lv_weaponCooldown);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridPsyonWeapon_Init () {
    libZHBR_gt_HybridPsyonWeapon = TriggerCreate("libZHBR_gt_HybridPsyonWeapon_Func");
    TriggerAddEventPlayerEffectUsed(libZHBR_gt_HybridPsyonWeapon, c_playerAny, "ZHBRPsyonWeapon@PeriodicSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hybrid - Psyon - Stop Order
//--------------------------------------------------------------------------------------------------
bool libZHBR_gt_HybridPsyonStopOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    order lv_order;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_caster = EventUnit();
    lv_order = EventUnitOrder();

    // Conditions
    if (testConds) {
        if (!((OrderGetFlag(lv_order, c_cmdUser) == true))) {
            return false;
        }

        if (!((OrderGetFlag(lv_order, c_cmdQueued) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_caster, "ZHBRPsyonWeapon@ClearTrackedUnits", lv_caster);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libZHBR_gt_HybridPsyonStopOrder_Init () {
    libZHBR_gt_HybridPsyonStopOrder = TriggerCreate("libZHBR_gt_HybridPsyonStopOrder_Func");
    TriggerAddEventUnitOrder(libZHBR_gt_HybridPsyonStopOrder, null, AbilityCommand("ZHBRPsyon@Stop", 0));
}

void libZHBR_InitTriggers () {
    libZHBR_gt_OfflineInitialization_Init();
    libZHBR_gt_InitializeHybrids_Init();
    libZHBR_gt_RaceControlUnitSelection_Init();
    libZHBR_gt_RaceControlButtonInitialization_Init();
    libZHBR_gt_RaceControlButtonUsed_Init();
    libZHBR_gt_HybridSuppressingRegeneration_Init();
    libZHBR_gt_HybridBuildController_Init();
    libZHBR_gt_HybridTeleportStartSet_Init();
    libZHBR_gt_HybridTeleportFinishSet_Init();
    libZHBR_gt_HybridTeleportTargetingUpdate_Init();
    libZHBR_gt_HybridAmplifierConstruction_Init();
    libZHBR_gt_HybridAmplifierConstructionCompleted_Init();
    libZHBR_gt_VoidRiftPingHandler_Init();
    libZHBR_gt_HybridStasisCellConnection_Init();
    libZHBR_gt_HybridKeystoneConnection_Init();
    libZHBR_gt_HybridProjectorConnection_Init();
    libZHBR_gt_HybridVespeneConcentratorConstructionCompleted_Init();
    libZHBR_gt_HybridShapeshifterVoidChasm_Init();
    libZHBR_gt_HybridNemesisWeapon_Init();
    libZHBR_gt_HybridNavigatorCargoUI_Init();
    libZHBR_gt_HybridPsyonWeapon_Init();
    libZHBR_gt_HybridPsyonStopOrder_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libZHBR_InitLib_completed = false;

void libZHBR_InitLib () {
    if (libZHBR_InitLib_completed) {
        return;
    }

    libZHBR_InitLib_completed = true;

    libZHBR_InitLibraries();
    libZHBR_InitVariables();
    libZHBR_InitTriggers();
}

