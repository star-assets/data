include "TriggerLibs/NativeLib"

include "LibUEDC_h"

//--------------------------------------------------------------------------------------------------
// Library: Factions - UED
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUEDC_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libUEDC_InitVariables_completed = false;

void libUEDC_InitVariables () {
    int init_i;

    if (libUEDC_InitVariables_completed) {
        return;
    }

    libUEDC_InitVariables_completed = true;

    libUEDC_gv_beaconConstructionunitgroup = UnitGroupEmpty();
    libUEDC_gv_uEDPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        libUEDC_gv_beacons[init_i] = UnitGroupEmpty();
    }
    libUEDC_gv_beaconsButtonCountLabel = c_invalidDialogControlId;
    libUEDC_gv_beaconsButton = c_invalidDialogControlId;
}

// Functions
void libUEDC_gf_Randomsoundonpoint (string lp_sound1, string lp_sound2, string lp_sound3, string lp_sound4, string lp_sound5, string lp_sound6, string lp_sound7, string lp_sound8, string lp_sound9, string lp_sound10, int lp_d09AD0BED0BBD0B8D187D0B5D181D182D0B2D0BED0B7D0B2D183D0BAD0BED0B2, fixed lp_volume, int lp_d0B2D18BD181D0BED182D0B0, playergroup lp_playsoundfor, point lp_point) {
    // Variable Declarations
    int lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA = 1;

    // Implementation
    lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA = RandomInt(1, lp_d09AD0BED0BBD0B8D187D0B5D181D182D0B2D0BED0B7D0B2D183D0BAD0BED0B2);
    if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 1)) {
        SoundPlayAtPointForPlayer(SoundLink(lp_sound1, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
    }
    else {
        if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 2)) {
            SoundPlayAtPointForPlayer(SoundLink(lp_sound2, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
        }
        else {
            if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 3)) {
                SoundPlayAtPointForPlayer(SoundLink(lp_sound3, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
            }
            else {
                if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 4)) {
                    SoundPlayAtPointForPlayer(SoundLink(lp_sound4, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                }
                else {
                    if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 5)) {
                        SoundPlayAtPointForPlayer(SoundLink(lp_sound5, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                    }
                    else {
                        if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 6)) {
                            SoundPlayAtPointForPlayer(SoundLink(lp_sound6, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                        }
                        else {
                            if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 7)) {
                                SoundPlayAtPointForPlayer(SoundLink(lp_sound7, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                            }
                            else {
                                if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 8)) {
                                    SoundPlayAtPointForPlayer(SoundLink(lp_sound8, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                                }
                                else {
                                    if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 9)) {
                                        SoundPlayAtPointForPlayer(SoundLink(lp_sound9, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                                    }
                                    else {
                                        if ((lv_d0B2D18BD0B1D180D0B0D0BDD0BDD18BD0B9D0B7D0B2D183D0BA == 10)) {
                                            SoundPlayAtPointForPlayer(SoundLink(lp_sound10, c_soundIndexAny), c_maxPlayers, lp_playsoundfor, lp_point, lp_d0B2D18BD181D0BED182D0B0, lp_volume, 0.0);
                                        }

                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

void libUEDC_gf_UEDDebugMessageForPlayer (playergroup lp_forplayer, text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    if ((libUEDC_gv_debugmodeonoroff == true)) {
        UIDisplayMessage(lp_forplayer, c_messageAreaSubtitle, lp_message);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UED Race
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_InitializeUEDRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4E1CD846_g;
    int auto4E1CD846_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E1CD846_g = PlayerGroupAll();
    auto4E1CD846_var = -1;
    while (true) {
        auto4E1CD846_var = PlayerGroupNextPlayer(auto4E1CD846_g, auto4E1CD846_var);
        if (auto4E1CD846_var < 0) { break; }
        if ((PlayerRace(auto4E1CD846_var) == "UED")) {
            PlayerSetCommander(auto4E1CD846_var, "UED");
            PlayerSetSpray(auto4E1CD846_var, 1, "Decal_Spray_0059_01");
            SoundChannelDSPInsert(PlayerGroupSingle(auto4E1CD846_var), c_soundCategoryVoice, "ReverbForest");
            SoundChannelDSPInsert(PlayerGroupSingle(auto4E1CD846_var), c_soundCategoryReady, "ReverbForest");
            SoundChannelDSPInsert(PlayerGroupSingle(auto4E1CD846_var), c_soundCategoryAlert, "ReverbForest");
            libNtve_gf_SetUpgradeLevelForPlayer(auto4E1CD846_var, "UEDAdvisorUpgradeBecauseEditorIsFunctionalHelp", 1);
            PlayerGroupAdd(libUEDC_gv_uEDPlayers, auto4E1CD846_var);
        }

    }
    TriggerEnable(libUEDC_gt_EffectSpawnunit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_InitializeUEDRace_Init () {
    libUEDC_gt_InitializeUEDRace = TriggerCreate("libUEDC_gt_InitializeUEDRace_Func");
    TriggerAddEventGeneric(libUEDC_gt_InitializeUEDRace, "GAME START UED");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect -  Salvager Mine
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_EffectSalvagerMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_salvager;
    actor lv_beamModel1;
    actor lv_beamModel2;
    actor lv_launchModel;
    actor lv_pickupMineralCrystalGlowModel;
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Salvager"))) {
            return false;
        }

        if (!(((UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "BattleStationMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "BattleStationMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "LabMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "LabMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralField450") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralFieldOpaque900") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "MineralFieldOpaque") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierRichMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "PurifierRichMineralField750") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "RichMineralField") || (UnitGetType(OrderGetTargetUnit(UnitOrder(EventUnit(), 0))) == "RichMineralField750")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_salvager = EventUnit();
    TimerStart(lv_timer, 3.0, false, c_timeGame);
    lv_timer = TimerLastStarted();
    libNtve_gf_AttachModelToUnit(lv_salvager, "SalvagerMineBeam", "Ref_Weapon");
    lv_beamModel1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(OrderGetTargetUnit(UnitOrder(lv_salvager, 0)), "PickupMineralCrystalGlow", "Ref_Weapon");
    lv_pickupMineralCrystalGlowModel = libNtve_gf_ActorLastCreated();
    Wait(0.35, c_timeGame);
    libNtve_gf_AttachModelToUnit(lv_salvager, "SalvagerMineBeam", "Ref_Weapon");
    lv_beamModel2 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(lv_salvager, "SalvagerMineLaunch", "Ref_Weapon");
    lv_launchModel = libNtve_gf_ActorLastCreated();
    while (!(((TimerGetRemaining(lv_timer) == 0.0) || (UnitIsAlive(lv_salvager) == false) || (UnitOrderHasAbil(lv_salvager, "SalvagerHarvest") == false)))) {
        Wait(0.065, c_timeGame);
    }
    Wait(0.065, c_timeGame);
    libNtve_gf_KillModel(lv_pickupMineralCrystalGlowModel);
    libNtve_gf_KillModel(lv_launchModel);
    libNtve_gf_KillModel(lv_beamModel1);
    libNtve_gf_KillModel(lv_beamModel2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_EffectSalvagerMine_Init () {
    libUEDC_gt_EffectSalvagerMine = TriggerCreate("libUEDC_gt_EffectSalvagerMine_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_EffectSalvagerMine, null, AbilityCommand("SalvagerHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect -  Spawn unit
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_EffectSpawnunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerRace(EventPlayer()) == "UED"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnit()) == "Garmr") || (UnitGetType(EventUnit()) == "StrikeTrooper") || (UnitGetType(EventUnit()) == "Taranis") || (UnitGetType(EventUnit()) == "Lazarus") || (UnitGetType(EventUnit()) == "PoliticalAdvisor") || (UnitGetType(EventUnit()) == "CrimsonEye") || (UnitGetType(EventUnit()) == "Huracan") || (UnitGetType(EventUnit()) == "BeaconUED"))) {
        libNtve_gf_AttachModelToUnit(EventUnit(), "UEDUnitCreatedEffectSmall", "Ref_Center");
        libUEDC_gf_Randomsoundonpoint("unitcompleteUED", "TeleportationNodeUnitSpawnSound", "unitcompleteUED", null, null, null, null, null, null, null, 3, 80.0, 12, PlayerGroupAll(), UnitGetPosition(EventUnit()));
        UnitBehaviorAdd(EventUnit(), "GlazeTeleportationEffect", EventUnit(), 1);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 25.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 25.0);
        Wait(1.5, c_timeGame);
        UnitBehaviorRemove(EventUnit(), "GlazeTeleportationEffect", 1);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
        UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 0.0);
        UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
        return true;
    }
    else {
        if (((UnitGetType(EventUnit()) == "Strikefighter") || (UnitGetType(EventUnit()) == "Napoleon") || (UnitGetType(EventUnit()) == "Typhoon") || (UnitGetType(EventUnit()) == "CitadelAAT") || (UnitGetType(EventUnit()) == "PeenemundeMRLS") || (UnitGetType(EventUnit()) == "Valkyrie") || (UnitGetType(EventUnit()) == "TransportShuttle") || (UnitGetType(EventUnit()) == "DrakkarAPC"))) {
            libNtve_gf_AttachModelToUnit(EventUnit(), "UEDUnitCreatedEffectMedium", "Ref_Center");
            libUEDC_gf_Randomsoundonpoint("unitcompleteUED", "TeleportationNodeUnitSpawnSound", "unitcompleteUED", null, null, null, null, null, null, null, 3, 80.0, 12, PlayerGroupAll(), UnitGetPosition(EventUnit()));
            UnitBehaviorAdd(EventUnit(), "GlazeTeleportationEffect", EventUnit(), 1);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 25.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 25.0);
            Wait(1.5, c_timeGame);
            UnitBehaviorRemove(EventUnit(), "GlazeTeleportationEffect", 1);
            libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
            UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 0.0);
            UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
            return true;
        }
        else {
            if (((UnitGetType(EventUnit()) == "HonorguardCruiser"))) {
                libNtve_gf_AttachModelToUnit(EventUnit(), "UEDUnitCreatedEffectLarge", "Ref_Center");
                libUEDC_gf_Randomsoundonpoint("unitcompleteUED", "TeleportationNodeUnitSpawnSound", "unitcompleteUED", null, null, null, null, null, null, null, 3, 80.0, 12, PlayerGroupAll(), UnitGetPosition(EventUnit()));
                UnitBehaviorAdd(EventUnit(), "GlazeTeleportationEffect", EventUnit(), 1);
                UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 25.0);
                UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 25.0);
                Wait(1.5, c_timeGame);
                UnitBehaviorRemove(EventUnit(), "GlazeTeleportationEffect", 1);
                libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
                UnitSetPropertyFixed(EventUnit(), c_unitPropShieldsMax, 0.0);
                UnitSetPropertyFixed(EventUnit(), c_unitPropShields, 0.0);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_EffectSpawnunit_Init () {
    libUEDC_gt_EffectSpawnunit = TriggerCreate("libUEDC_gt_EffectSpawnunit_Func");
    TriggerEnable(libUEDC_gt_EffectSpawnunit, false);
    TriggerAddEventUnitRegion(libUEDC_gt_EffectSpawnunit, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon anim create
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_Beaconanimcreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_beaconConstAnim;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BeaconUED"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libUEDC_gv_beaconConstructionunitgroup, EventUnitProgressUnit());
    libNtve_gf_AttachModelToUnit(EventUnitProgressUnit(), "UEDCalldownWithBeacon", "Ref_Center");
    lv_beaconConstAnim = libNtve_gf_ActorLastCreated();
    libNtve_gf_PlayAnimation(lv_beaconConstAnim, c_animNameDefault, "Stand Work Start", c_animFlagNonLooping, c_animTimeDefault);
    Wait(4.995, c_timeGame);
    libNtve_gf_PlayAnimation(lv_beaconConstAnim, c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    while (!((libNtve_gf_UnitIsUnderConstruction(EventUnitProgressUnit()) == false))) {
        Wait(0.065, c_timeGame);
    }
    libNtve_gf_KillModel(lv_beaconConstAnim);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_Beaconanimcreate_Init () {
    libUEDC_gt_Beaconanimcreate = TriggerCreate("libUEDC_gt_Beaconanimcreate_Func");
    TriggerAddEventUnitConstructProgress(libUEDC_gt_Beaconanimcreate, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Owards - effect for targetting units
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_Owardseffectfortargettingunits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Aiur_PowerPoint_Loop", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 120.0, 0.0);
    do {
        UnitBehaviorAdd(EventUnit(), "GlazeLazarusDeviceEffect", EventUnit(), 1);
        Wait(1.5, c_timeGame);
        UnitBehaviorRemove(EventUnit(), "GlazeLazarusDeviceEffect", 1);
    }while ((UnitHasBehavior2(EventUnit(), "OnwardComrades") == true));
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_Owardseffectfortargettingunits_Init () {
    libUEDC_gt_Owardseffectfortargettingunits = TriggerCreate("libUEDC_gt_Owardseffectfortargettingunits_Func");
    TriggerAddEventUnitBehaviorChange(libUEDC_gt_Owardseffectfortargettingunits, null, "OnwardComrades", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Owards - effect for Political Advisor
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_OwardseffectforPoliticalAdvisor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayAtPointForPlayer(SoundLink("Protoss_PowerUpLarge", -1), c_maxPlayers, PlayerGroupAll(), UnitGetPosition(EventUnit()), 12.0, 120.0, 0.0);
    libNtve_gf_AttachModelToUnit(EventUnit(), "PoliticalAdvisorOweransWave", "Ref_Center");
    Wait(1.5, c_timeGame);
    libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_OwardseffectforPoliticalAdvisor_Init () {
    libUEDC_gt_OwardseffectforPoliticalAdvisor = TriggerCreate("libUEDC_gt_OwardseffectforPoliticalAdvisor_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_OwardseffectforPoliticalAdvisor, null, AbilityCommand("OnwardComrades", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Calculate Beacons
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_CalculateBeacons_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto254691C0_g;
    int auto254691C0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto254691C0_g = libUEDC_gv_uEDPlayers;
    auto254691C0_var = -1;
    while (true) {
        auto254691C0_var = PlayerGroupNextPlayer(auto254691C0_g, auto254691C0_var);
        if (auto254691C0_var < 0) { break; }
        libUEDC_gv_beacons[auto254691C0_var] = UnitGroup("TeleportationNode", auto254691C0_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        libNtve_gf_SetDialogItemText(libUEDC_gv_beaconsButtonCountLabel, IntToText(UnitGroupCount(libUEDC_gv_beacons[auto254691C0_var], c_unitCountAlive)), PlayerGroupSingle(auto254691C0_var));
        if ((UnitGroupCount(libUEDC_gv_beacons[auto254691C0_var], c_unitCountAlive) == 0)) {
            DialogControlSetEnabled(libUEDC_gv_beaconsButton, PlayerGroupSingle(auto254691C0_var), false);
        }
        else {
            DialogControlSetEnabled(libUEDC_gv_beaconsButton, PlayerGroupSingle(auto254691C0_var), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_CalculateBeacons_Init () {
    libUEDC_gt_CalculateBeacons = TriggerCreate("libUEDC_gt_CalculateBeacons_Func");
    TriggerEnable(libUEDC_gt_CalculateBeacons, false);
    TriggerAddEventTimePeriodic(libUEDC_gt_CalculateBeacons, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Beacons Button
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_InitBeaconsButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_icon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_icon = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/ArmyButton2");
    libUEDC_gv_beaconsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ArmyButton2/Icon");
    lv_icon = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(libUEDC_gv_beaconsButton, StringExternal("Param/Value/lib_UEDC_71F49E44"), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/ArmyButton2/CountLabel");
    libNtve_gf_SetDialogItemImage(lv_icon, "Assets\\Textures\\BTN-UED-Teleportation-Node.dds", PlayerGroupAll());
    libUEDC_gv_beaconsButtonCountLabel = DialogControlLastCreated();
    DialogControlSetVisible(libUEDC_gv_beaconsButton, libUEDC_gv_uEDPlayers, true);
    TriggerEnable(libUEDC_gt_CalculateBeacons, true);
    TriggerEnable(libUEDC_gt_BeaconsButtonUsed, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_InitBeaconsButton_Init () {
    libUEDC_gt_InitBeaconsButton = TriggerCreate("libUEDC_gt_InitBeaconsButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacons Button Used
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_BeaconsButtonUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUEDC_gv_beaconsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroupSelected(EventPlayer()), EventPlayer(), false);
    UnitGroupSelect(libUEDC_gv_beacons[EventPlayer()], EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_BeaconsButtonUsed_Init () {
    libUEDC_gt_BeaconsButtonUsed = TriggerCreate("libUEDC_gt_BeaconsButtonUsed_Func");
    TriggerEnable(libUEDC_gt_BeaconsButtonUsed, false);
    TriggerAddEventDialogControl(libUEDC_gt_BeaconsButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeHotkeyPressed);
    TriggerAddEventDialogControl(libUEDC_gt_BeaconsButtonUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Beacon Build
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_BeaconBuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beacon;
    unit lv_oH;
    unit lv_dropPod;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_oH = EventUnit();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "BeaconUED", c_unitCreateIgnoreBirth, EventPlayer(), UnitGetPosition(lv_oH));
    lv_beacon = UnitLastCreated();
    libNtve_gf_ShowHideUnit(lv_beacon, false);
    libNtve_gf_PauseUnit(lv_beacon, true);
    Wait(0.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("Ghost_DropPodImpact", 1), PlayerGroupAll(), UnitGetPosition(lv_beacon), 12.0, 100.0, 0.0);
    Wait(1.0, c_timeGame);
    libNtve_gf_CreateUnitsAtPoint2(1, "UEDDropPod", c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(lv_beacon));
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), UnitGetPosition(lv_beacon), 12.0, 200.0, 0.0);
    UnitIssueOrder(lv_beacon, OrderTargetingPoint(AbilityCommand("moveUED", 0), UnitRallyPointTargetPoint(lv_oH, 1, 1)), c_orderQueueReplace);
    libNtve_gf_ShowHideUnit(lv_beacon, true);
    libNtve_gf_PauseUnit(lv_beacon, false);
    Wait(0.3, c_timeGame);
    UnitKill(lv_dropPod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_BeaconBuild_Init () {
    libUEDC_gt_BeaconBuild = TriggerCreate("libUEDC_gt_BeaconBuild_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_BeaconBuild, null, AbilityCommand("CalldownBeacon", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resourses Infusion Tower
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_ResoursesInfusionTower_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnitTargetUnit(), "AlgoritmDruseBeatanField") == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "ResourceDoublingField", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_ResoursesInfusionTower_Init () {
    libUEDC_gt_ResoursesInfusionTower = TriggerCreate("libUEDC_gt_ResoursesInfusionTower_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_ResoursesInfusionTower, null, AbilityCommand("SalvagerHarvest", 0), c_abilHarvestStageHarvest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Salvager Harvest
//--------------------------------------------------------------------------------------------------
bool libUEDC_gt_SalvagerHarvest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "ResourceDoublingField") == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "ResourceDoublingField", 1);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMinerals, c_playerPropOperAdd, 1);
    PlayerModifyPropertyInt(UnitGetOwner(EventUnit()), c_playerPropMineralsCollected, c_playerPropOperAdd, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUEDC_gt_SalvagerHarvest_Init () {
    libUEDC_gt_SalvagerHarvest = TriggerCreate("libUEDC_gt_SalvagerHarvest_Func");
    TriggerAddEventUnitAbility(libUEDC_gt_SalvagerHarvest, null, AbilityCommand("SalvagerHarvest", 1), c_abilHarvestStageDropOff, false);
}

void libUEDC_InitTriggers () {
    libUEDC_gt_InitializeUEDRace_Init();
    libUEDC_gt_EffectSalvagerMine_Init();
    libUEDC_gt_EffectSpawnunit_Init();
    libUEDC_gt_Beaconanimcreate_Init();
    libUEDC_gt_Owardseffectfortargettingunits_Init();
    libUEDC_gt_OwardseffectforPoliticalAdvisor_Init();
    libUEDC_gt_CalculateBeacons_Init();
    libUEDC_gt_InitBeaconsButton_Init();
    libUEDC_gt_BeaconsButtonUsed_Init();
    libUEDC_gt_BeaconBuild_Init();
    libUEDC_gt_ResoursesInfusionTower_Init();
    libUEDC_gt_SalvagerHarvest_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUEDC_InitLib_completed = false;

void libUEDC_InitLib () {
    if (libUEDC_InitLib_completed) {
        return;
    }

    libUEDC_InitLib_completed = true;

    libUEDC_InitLibraries();
    libUEDC_InitVariables();
    libUEDC_InitTriggers();
}

