include "TriggerLibs/NativeLib"

include "LibSCEV_h"

//--------------------------------------------------------------------------------------------------
// Library: Factions - BroodWar
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSCEV_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libSCEV_InitVariables_completed = false;

void libSCEV_InitVariables () {
    if (libSCEV_InitVariables_completed) {
        return;
    }

    libSCEV_InitVariables_completed = true;

    libSCEV_gv_reaverPathingRange = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogValidator, "ReaverSCBWWeapon@Pathable", "MaxDistance", c_playerAny);
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Functions
//--------------------------------------------------------------------------------------------------
static void DbgInternal(string message) {
    TriggerDebugOutput(10, StringToText(message), true);
    return;
}
static bool l_StringIsValid (string s) {
    if ((s != "") && (s != null)) { return true; }
    return false;
}
static int l_WordCount (string fullString) {
    int count = 0;
    int i;
    if (fullString != "") {
        while (true) {
            i += 1;
            if (StringWord(fullString, i) == "") { break; }
            count += 1;
        }
    }
    return count;
}
static bool l_WordExistsInString (string fullString, string word) {
    int counter = 1;
    int end = l_WordCount(fullString);
    while (counter <= end) {
        if (StringWord(fullString, counter) == word) { return true; }
        counter += 1;
    }
    return false;
}
static int l_WordIndexInString (string fullString, string word) {
    int i = 1;
    int end = l_WordCount(fullString);
    string s;
    for (i = 1; i <= end; i += 1) {
        if (StringWord(fullString, i) == word) { return i; }
    }
    return -1;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: NydusCanalSCBW_Init
//--------------------------------------------------------------------------------------------------
static const string NYDUS_TYPE = "NydusCanalSCBW";
static trigger CargoTrig;
static trigger DeathTrig;
static string PeerNydusKey(unit u){
    return "NydusCanalSCBW."+IntToString(UnitGetTag(u))+".Peer";
}
static unit PeerNydusGet(unit u){
    if(UnitGetType(u)!=NYDUS_TYPE){return null;}
    else if(DataTableValueExists(true,PeerNydusKey(u))){
        return DataTableGetUnit(true,PeerNydusKey(u));
    }
    else{return null;}
}
static void PeerNydusSet(unit u1, unit u2){
    if(UnitGetType(u1)!=NYDUS_TYPE){return;}
    else if(UnitGetType(u2)!=NYDUS_TYPE){return;}
    else{
        DataTableSetUnit(true,PeerNydusKey(u1),u2);
        DataTableSetUnit(true,PeerNydusKey(u2),u1);
    }
}
static void DebugMsg(string s){
    TriggerDebugOutput(1,StringToText(s),false);
}
static void RegisterNydus(unit u){
    TriggerAddEventUnitCargo(CargoTrig,UnitRefFromUnit(u),true);
    TriggerAddEventUnitDied(DeathTrig,UnitRefFromUnit(u));
}
bool NydusCanalSCBW_DeathTrig(bool a, bool b){
    unit source= EventUnit();
    unit target = PeerNydusGet(source);
    UnitKill(target);
    return true;
}
bool NydusCanalSCBW_TeleportCargoTrig(bool a, bool b){
    unit source= EventUnit();
    unit target = PeerNydusGet(source);
    order o = Order(AbilityCommand(NYDUS_TYPE+"@Transport",c_abilTransportCmdUnloadAll));
    UnitCreateEffectUnit(target, NYDUS_TYPE+"@TransportCargoAB", EventUnitCargo());
    UnitIssueOrder(target,o,c_orderQueueAddToFront);
    return true;
}
bool NydusCanalSCBW_RegisterNydusTrig(bool a, bool b){
    unit builderUnit = EventUnit();
    unit builtUnit = EventUnitProgressUnit();
    // DebugMsg("builderUnit"+UnitGetType(builderUnit));
    // DebugMsg("builtUnit"+UnitGetType(builtUnit));
    if(UnitGetType(builderUnit)!=NYDUS_TYPE){return false;}
    else if(UnitGetType(builtUnit)!=NYDUS_TYPE){return false;}
    PeerNydusSet(builderUnit,builtUnit);
    RegisterNydus(builderUnit);
    RegisterNydus(builtUnit);
    return true;
}
bool NydusCanalSCBW_BuildFinishTrig(bool a, bool b){
    unit builderUnit = EventUnit();
    unit builtUnit = EventUnitProgressUnit();
    if(UnitGetType(builderUnit)!=NYDUS_TYPE){return false;}
    else if(UnitGetType(builtUnit)!=NYDUS_TYPE){return false;}
    UnitCreateEffectUnit(builderUnit, NYDUS_TYPE+"@Dummy", builtUnit);
    UnitCreateEffectUnit(builtUnit, NYDUS_TYPE+"@Dummy", builderUnit);
    return true;
}
void NydusCanalSCBW_Init(){
    trigger t;
    t= TriggerCreate("NydusCanalSCBW_TeleportCargoTrig");
    CargoTrig = t;
    t= TriggerCreate("NydusCanalSCBW_DeathTrig");
    DeathTrig = t;
    t= TriggerCreate("NydusCanalSCBW_RegisterNydusTrig");
    TriggerAddEventUnitConstructProgress(t,null,c_unitProgressStageStart);
    t= TriggerCreate("NydusCanalSCBW_BuildFinishTrig");
    TriggerAddEventUnitConstructProgress(t,null,c_unitProgressStageComplete);
}

void libSCEV_InitCustomScript () {
}

// Functions
void libSCEV_gf_LegacyIconsActivate (bool lp_activateDeactivate, playergroup lp_players) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    playergroup autoF07F57A5_g;
    int autoF07F57A5_var;
    playergroup auto4B565C14_g;
    int auto4B565C14_var;

    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    lv_panel = DialogControlLastCreated();
    if ((lp_activateDeactivate == true)) {
        autoF07F57A5_g = lp_players;
        autoF07F57A5_var = -1;
        while (true) {
            autoF07F57A5_var = PlayerGroupNextPlayer(autoF07F57A5_g, autoF07F57A5_var);
            if (autoF07F57A5_var < 0) { break; }
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(autoF07F57A5_var, "ClassicIcons", lp_activateDeactivate);
        }
        DialogControlSetAnimationState(lv_panel, lp_players, "UseClassicIcons", "True");
    }
    else {
        auto4B565C14_g = lp_players;
        auto4B565C14_var = -1;
        while (true) {
            auto4B565C14_var = PlayerGroupNextPlayer(auto4B565C14_g, auto4B565C14_var);
            if (auto4B565C14_var < 0) { break; }
            libNtve_gf_PlayerApplySkinReplacingExistingUnit(auto4B565C14_var, "ClassicIcons", lp_activateDeactivate);
        }
        DialogControlSetAnimationState(lv_panel, lp_players, "UseClassicIcons", "False");
    }
}

string libSCEV_gf_CurrentWord () {
    // Automatic Variable Declarations
    // Implementation
    return libSCEV_gv_CURRENT_WORD;
}

string libSCEV_gf_MergeStatusEffectsMiscDataGet (string lp_buff, unit lp_unit) {
    // Automatic Variable Declarations
    string autoCB941DF5_val;

    // Implementation
    autoCB941DF5_val = lp_buff;
    if (autoCB941DF5_val == "ScienceVesselSCBWDefensiveMatrix") {
        return FixedToString(UnitBehaviorEffectTreeUserData(lp_unit, "ScienceVesselSCBWDefensiveMatrix@Data", "DefensiveMatrixShield"), 1);
    }
    else {
        return "?";
    }
}

bool libSCEV_gf_MergeStatusEffectsBuffTransferrable (string lp_buff) {
    // Variable Declarations
    int lv_i;
    int lv_aliasCount;

    // Automatic Variable Declarations
    int autoC0245FF2_ae;
    const int autoC0245FF2_ai = 1;

    // Variable Initialization
    lv_aliasCount = CatalogFieldValueCount(c_gameCatalogBehavior, lp_buff, "TechAliasArray", c_playerAny);

    // Implementation
    autoC0245FF2_ae = (lv_aliasCount - 1);
    lv_i = 0;
    for ( ; ( (autoC0245FF2_ai >= 0 && lv_i <= autoC0245FF2_ae) || (autoC0245FF2_ai < 0 && lv_i >= autoC0245FF2_ae) ) ; lv_i += autoC0245FF2_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogBehavior, lp_buff, "TechAliasArray[" + IntToString(lv_i) + "]", c_playerAny) == "_Transfer")) {
            return true;
        }

    }
    return false;
}

void libSCEV_gf_MergeStatusEffectsMiscDataSet (string lp_buff, unit lp_unit, string lp_miscData) {
    // Automatic Variable Declarations
    string auto3B9EA1F5_val;

    // Implementation
    if (((l_StringIsValid(lp_miscData) == false) || (lp_miscData == "?"))) {
        return;
    }

    auto3B9EA1F5_val = lp_buff;
    if (auto3B9EA1F5_val == "ScienceVesselSCBWDefensiveMatrix") {
        UnitBehaviorEffectTreeSetUserData(lp_unit, "ScienceVesselSCBWDefensiveMatrix@Data", "DefensiveMatrixShield", StringToFixed(lp_miscData));
    }
    else {
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: BWProtoss Init
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_BWProtossInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE06D65A4_g;
    int autoE06D65A4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE06D65A4_g = PlayerGroupAll();
    autoE06D65A4_var = -1;
    while (true) {
        autoE06D65A4_var = PlayerGroupNextPlayer(autoE06D65A4_g, autoE06D65A4_var);
        if (autoE06D65A4_var < 0) { break; }
        if ((PlayerRace(autoE06D65A4_var) == "BWPr")) {
            libSCEV_gf_LegacyIconsActivate(true, PlayerGroupSingle(autoE06D65A4_var));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_BWProtossInit_Init () {
    libSCEV_gt_BWProtossInit = TriggerCreate("libSCEV_gt_BWProtossInit_Func");
    TriggerAddEventGeneric(libSCEV_gt_BWProtossInit, "START GAME BWPr");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BWTerran Init
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_BWTerranInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE1F5B6E6_g;
    int autoE1F5B6E6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE1F5B6E6_g = PlayerGroupAll();
    autoE1F5B6E6_var = -1;
    while (true) {
        autoE1F5B6E6_var = PlayerGroupNextPlayer(autoE1F5B6E6_g, autoE1F5B6E6_var);
        if (autoE1F5B6E6_var < 0) { break; }
        if ((PlayerRace(autoE1F5B6E6_var) == "BWTe")) {
            libSCEV_gf_LegacyIconsActivate(true, PlayerGroupSingle(autoE1F5B6E6_var));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_BWTerranInit_Init () {
    libSCEV_gt_BWTerranInit = TriggerCreate("libSCEV_gt_BWTerranInit_Func");
    TriggerAddEventGeneric(libSCEV_gt_BWTerranInit, "START GAME BWTe");
}

//--------------------------------------------------------------------------------------------------
// Trigger: BWZerg Init
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_BWZergInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE1B374A0_g;
    int autoE1B374A0_var;

    // Actions
    if (!runActions) {
        return true;
    }

    NydusCanalSCBW_Init();
    autoE1B374A0_g = PlayerGroupAll();
    autoE1B374A0_var = -1;
    while (true) {
        autoE1B374A0_var = PlayerGroupNextPlayer(autoE1B374A0_g, autoE1B374A0_var);
        if (autoE1B374A0_var < 0) { break; }
        if ((PlayerRace(autoE1B374A0_var) == "BWZe")) {
            libSCEV_gf_LegacyIconsActivate(true, PlayerGroupSingle(autoE1B374A0_var));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_BWZergInit_Init () {
    libSCEV_gt_BWZergInit = TriggerCreate("libSCEV_gt_BWZergInit_Func");
    TriggerAddEventGeneric(libSCEV_gt_BWZergInit, "START GAME BWZe");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MimicCheck:StorePlayerIndex
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MimicCheckStorePlayerIndex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    unitgroup lv_ug;

    // Automatic Variable Declarations
    unitgroup autoDF838816_g;
    int autoDF838816_u;
    unit autoDF838816_var;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ug = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 12.375), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDF838816_g = lv_ug;
    autoDF838816_u = UnitGroupCount(autoDF838816_g, c_unitCountAll);
    for (;; autoDF838816_u -= 1) {
        autoDF838816_var = UnitGroupUnitFromEnd(autoDF838816_g, autoDF838816_u);
        if (autoDF838816_var == null) { break; }
        if ((UnitHasBehavior2(autoDF838816_var, "ChangelingDisguisePlayerIndex") == false) && (ValidatorExecute("TargetIsChangelingSCBW", autoDF838816_var, autoDF838816_var) == 0) && (UnitHasBehavior2(autoDF838816_var, "ChangelingDisable") == true)) {
            UnitBehaviorAdd(autoDF838816_var, "ChangelingDisguisePlayerIndex", autoDF838816_var, 1);
            UnitBehaviorEffectTreeSetUserData(autoDF838816_var, "ChangelingDisguisePlayerIndex", "Player", lv_owner);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MimicCheckStorePlayerIndex_Init () {
    libSCEV_gt_MimicCheckStorePlayerIndex = TriggerCreate("libSCEV_gt_MimicCheckStorePlayerIndex_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_MimicCheckStorePlayerIndex, c_playerAny, "DisguiseEx3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MimicCheck:SpiderMine
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MimicCheckSpiderMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_target, "ChangelingDisguisePlayerIndex") == true)) {
        lv_playerIndex = FixedToInt(UnitBehaviorEffectTreeUserData(lv_target, "ChangelingDisguisePlayerIndex", "Player"));
        if ((UnitFilterMatch(EventPlayerEffectUsedUnit(c_effectUnitSource), lv_playerIndex, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == false)) {
            UnitBehaviorAdd(lv_target, "SpiderMineSCBWWeapon@MimicDisable", EventPlayerEffectUsedUnit(c_effectUnitSource), 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MimicCheckSpiderMine_Init () {
    libSCEV_gt_MimicCheckSpiderMine = TriggerCreate("libSCEV_gt_MimicCheckSpiderMine_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_MimicCheckSpiderMine, c_playerAny, "SpiderMineSCBWWeapon@MimicCheck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReaverPathing:Check
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_ReaverPathingCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_path;
    fixed lv_pathToAttacker;
    unit lv_target;
    unit lv_attacker;
    const fixed lv_pathingLeeway = 2.0;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_attacker = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!(((UnitIsValid(lv_attacker) && UnitIsValid(lv_target)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_path = AIPathingCostMap(UnitGetPosition(lv_attacker), UnitGetPosition(lv_target));
    if ((lv_path > libSCEV_gv_reaverPathingRange)) {
        UnitCreateEffectUnit(lv_attacker, "ReaverSCBWWeapon@ChaseSwitch", lv_target);
        return true;
    }
    else if ((lv_path > -1.0)) {
        UnitCreateEffectUnit(lv_attacker, "ReaverSCBWWeapon@SetInitial", lv_target);
        return true;
    }
    lv_path = PointPathingCost(UnitGetPosition(lv_attacker), UnitGetPosition(lv_target));
    lv_pathToAttacker = PointPathingCost(UnitGetPosition(lv_target), UnitGetPosition(lv_attacker));
    if ((lv_path == 65536.0) && (lv_pathToAttacker == 65536.0)) {
        UnitCreateEffectUnit(lv_attacker, "ReaverSCBWWeapon@ChaseCancel", lv_attacker);
        return true;
    }
    else if ((lv_pathToAttacker > (libSCEV_gv_reaverPathingRange + lv_pathingLeeway))) {
        UnitCreateEffectUnit(lv_attacker, "ReaverSCBWWeapon@ChaseSwitch", lv_target);
        return true;
    }
    else if ((lv_pathToAttacker <= (libSCEV_gv_reaverPathingRange + lv_pathingLeeway)) && (lv_pathToAttacker > -1.0)) {
        UnitCreateEffectUnit(lv_attacker, "ReaverSCBWWeapon@SetInitial", lv_target);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_ReaverPathingCheck_Init () {
    libSCEV_gt_ReaverPathingCheck = TriggerCreate("libSCEV_gt_ReaverPathingCheck_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_ReaverPathingCheck, c_playerAny, "ReaverSCBWWeapon@Launch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MergeStatusEffects:Track
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MergeStatusEffectsTrack_Func (bool testConds, bool runActions) {
    int init_i;
    int init_j;

    // Variable Declarations
    const int lv_c_buffCap = 63;
    string lv_buffList;
    string[lv_c_buffCap + 1] lv_buffListBuffs;
    string[lv_c_buffCap + 1][2] lv_buff;
    fixed[lv_c_buffCap + 1][2] lv_buffDuration;
    int[lv_c_buffCap + 1][2] lv_buffOrigin;
    string[lv_c_buffCap + 1][2] lv_buffMisc;
    unit[2] lv_u;
    unit lv_otherUnit;
    string lv_iBuff;
    int lv_k;
    int lv_i;
    int lv_j;
    int lv_other;
    fixed lv_otherDuration;
    bool lv_hasBuffs;
    string lv_buffListBuff;
    fixed lv_buffListDuration;
    int lv_buffListOrigin;
    string lv_buffListMisc;
    int lv_buffListCounter;
    bool lv_skip;

    // Automatic Variable Declarations
    const int auto00556874_ae = 1;
    const int auto00556874_ai = 1;
    unit autoD131F5B6_u;
    int autoD131F5B6_i;
    const int autoA1A8384B_ae = 1;
    const int autoA1A8384B_ai = 1;
    const int auto0AA25D57_ae = lv_c_buffCap;
    const int auto0AA25D57_ai = 1;
    int auto6A44789D_ae;
    const int auto6A44789D_ai = 1;

    // Variable Initialization
    lv_buffList = "";
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        lv_buffListBuffs[init_i] = "";
    }
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lv_buff[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lv_buffOrigin[init_i][init_j] = -1;
        }
    }
    for (init_i = 0; init_i <= lv_c_buffCap; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lv_buffMisc[init_i][init_j] = "?";
        }
    }
    lv_buffListBuff = "";
    lv_buffListOrigin = -1;
    lv_buffListMisc = "?";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_u[0] = EventUnit();
    lv_u[1] = EventUnitTargetUnit();
    lv_k = 0;
    for ( ; ( (auto00556874_ai >= 0 && lv_k <= auto00556874_ae) || (auto00556874_ai < 0 && lv_k >= auto00556874_ae) ) ; lv_k += auto00556874_ai ) {
        lv_i = 0;
        autoD131F5B6_u = lv_u[lv_k];
        autoD131F5B6_i = 1;
        for ( ; autoD131F5B6_i <= UnitBehaviorCountAll(autoD131F5B6_u) ; autoD131F5B6_i += BoolToInt(lv_iBuff == UnitBehaviorGet(autoD131F5B6_u, autoD131F5B6_i)) ) {
            lv_iBuff = UnitBehaviorGet(autoD131F5B6_u, autoD131F5B6_i);
            if ((libSCEV_gf_MergeStatusEffectsBuffTransferrable(lv_iBuff) == true)) {
                lv_hasBuffs = true;
                lv_buff[lv_i][lv_k] = (lv_iBuff);
                lv_buffDuration[lv_i][lv_k] = UnitBehaviorDuration(lv_u[lv_k], lv_iBuff);
                lv_buffOrigin[lv_i][lv_k] = UnitBehaviorEffectPlayer(lv_u[lv_k], lv_iBuff, c_effectPlayerCaster, 0);
                lv_buffMisc[lv_i][lv_k] = libSCEV_gf_MergeStatusEffectsMiscDataGet(lv_iBuff, lv_u[lv_k]);
                lv_i += 1;
            }

        }
    }
    if ((lv_hasBuffs == false)) {
        return true;
    }

    lv_k = 0;
    for ( ; ( (autoA1A8384B_ai >= 0 && lv_k <= autoA1A8384B_ae) || (autoA1A8384B_ai < 0 && lv_k >= autoA1A8384B_ae) ) ; lv_k += autoA1A8384B_ai ) {
        if (lv_other >= 1) {
            lv_other = 0;
        }
        else {
            lv_other = lv_other + 1;
        }
        lv_i = 0;
        for ( ; ( (auto0AA25D57_ai >= 0 && lv_i <= auto0AA25D57_ae) || (auto0AA25D57_ai < 0 && lv_i >= auto0AA25D57_ae) ) ; lv_i += auto0AA25D57_ai ) {
            lv_skip = false;
            lv_iBuff = (lv_buff[lv_i][lv_k]);
            if (((lv_iBuff == "") || (lv_iBuff == null))) {
                break;
            }

            auto6A44789D_ae = (lv_buffListCounter - 1);
            lv_j = 0;
            for ( ; ( (auto6A44789D_ai >= 0 && lv_j <= auto6A44789D_ae) || (auto6A44789D_ai < 0 && lv_j >= auto6A44789D_ae) ) ; lv_j += auto6A44789D_ai ) {
                if ((lv_buff[lv_i][lv_k] == lv_buffListBuffs[lv_j])) {
                    lv_skip = true;
                    break;
                }

            }
            if ((lv_skip == true)) {
                continue;
            }

            lv_buffListBuff = lv_buff[lv_i][lv_k];
            lv_buffListDuration = lv_buffDuration[lv_i][lv_k];
            lv_buffListOrigin = lv_buffOrigin[lv_i][lv_k];
            lv_buffListMisc = lv_buffMisc[lv_i][lv_k];
            if ((UnitHasBehavior2(lv_u[lv_other], lv_iBuff) == true)) {
                lv_otherDuration = UnitBehaviorDuration(lv_u[lv_other], lv_iBuff);
                if ((lv_buffDuration[lv_i][lv_k] < lv_otherDuration)) {
                    lv_buffListBuff = (lv_iBuff);
                    lv_buffListDuration = lv_otherDuration;
                    lv_buffListOrigin = UnitBehaviorEffectPlayer(lv_u[lv_other], lv_iBuff, c_effectPlayerCaster, 0);
                    lv_buffListMisc = libSCEV_gf_MergeStatusEffectsMiscDataGet(lv_iBuff, lv_u[lv_other]);
                }

            }

            lv_buffListBuffs[lv_buffListCounter] = lv_buffListBuff;
            lv_buffList = (lv_buffList + lv_buffListBuff + "|" + FixedToString(lv_buffListDuration, 1) + "|" + IntToString(lv_buffListOrigin) + "|" + lv_buffListMisc + " ");
            lv_buffListCounter += 1;
        }
    }
    DataTableSetString(true, "MergeBuffList", lv_buffList);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MergeStatusEffectsTrack_Init () {
    libSCEV_gt_MergeStatusEffectsTrack = TriggerCreate("libSCEV_gt_MergeStatusEffectsTrack_Func");
    TriggerAddEventUnitAbility(libSCEV_gt_MergeStatusEffectsTrack, null, AbilityCommand("ArchonSCBWMerge", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libSCEV_gt_MergeStatusEffectsTrack, null, AbilityCommand("DarkArchonSCBWMerge", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libSCEV_gt_MergeStatusEffectsTrack, null, AbilityCommand("ArchonWarp", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MergeStatusEffects:Begin
//--------------------------------------------------------------------------------------------------
bool libSCEV_gt_MergeStatusEffectsBegin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_buffList;
    string lv_currBuff;
    unit lv_mergeUnit;
    int lv_origin;
    string lv_buff;

    // Automatic Variable Declarations
    int auto3728D662_ai;
    int auto3728D662_ae;

    // Variable Initialization
    lv_buffList = "";
    lv_currBuff = "";
    lv_mergeUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_buffList = DataTableGetString(true, "MergeBuffList");
    DataTableValueRemove(true, "MergeBuffList");
    if ((l_StringIsValid(lv_buffList) == false)) {
        return true;
    }

    auto3728D662_ai = 1;
    auto3728D662_ae = l_WordCount(lv_buffList)+1;
    while (auto3728D662_ai < auto3728D662_ae) {
        libSCEV_gv_CURRENT_WORD = StringWord(lv_buffList, auto3728D662_ai);
        libSCEV_gv_CURRENT_WORD_INDEX = auto3728D662_ai;
        auto3728D662_ai = auto3728D662_ai+1;
        lv_currBuff = StringReplaceWord(libSCEV_gv_CURRENT_WORD, "|", " ", c_stringReplaceAll, c_stringCase);
        lv_buff = (StringWord(lv_currBuff, 1));
        if (((lv_buff == null) || (lv_buff == ""))) {

        }

        lv_origin = StringToInt(StringWord(lv_currBuff, 3));
        if ((lv_origin == -1)) {
            lv_origin = UnitGetOwner(lv_mergeUnit);
        }

        UnitBehaviorAddPlayer(lv_mergeUnit, lv_buff, StringToInt(StringWord(lv_currBuff, 3)), 1);
        UnitBehaviorSetDurationRemaining(lv_mergeUnit, lv_buff, StringToFixed(StringWord(lv_currBuff, 2)));
        if ((StringWord(lv_currBuff, 4) != "?")) {
            libSCEV_gf_MergeStatusEffectsMiscDataSet(lv_buff, lv_mergeUnit, StringWord(lv_currBuff, 4));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSCEV_gt_MergeStatusEffectsBegin_Init () {
    libSCEV_gt_MergeStatusEffectsBegin = TriggerCreate("libSCEV_gt_MergeStatusEffectsBegin_Func");
    TriggerAddEventPlayerEffectUsed(libSCEV_gt_MergeStatusEffectsBegin, c_playerAny, "SCBW_MergeBegin");
}

void libSCEV_InitTriggers () {
    libSCEV_gt_BWProtossInit_Init();
    libSCEV_gt_BWTerranInit_Init();
    libSCEV_gt_BWZergInit_Init();
    libSCEV_gt_MimicCheckStorePlayerIndex_Init();
    libSCEV_gt_MimicCheckSpiderMine_Init();
    libSCEV_gt_ReaverPathingCheck_Init();
    libSCEV_gt_MergeStatusEffectsTrack_Init();
    libSCEV_gt_MergeStatusEffectsBegin_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSCEV_InitLib_completed = false;

void libSCEV_InitLib () {
    if (libSCEV_InitLib_completed) {
        return;
    }

    libSCEV_InitLib_completed = true;

    libSCEV_InitLibraries();
    libSCEV_InitVariables();
    libSCEV_InitCustomScript();
    libSCEV_InitTriggers();
}

