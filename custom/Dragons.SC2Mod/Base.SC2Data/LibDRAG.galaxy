include "TriggerLibs/NativeLib"

include "LibDRAG_h"

//--------------------------------------------------------------------------------------------------
// Library: Factions - Dragons
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libDRAG_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Ascend
//--------------------------------------------------------------------------------------------------
trigger DragonAscend;
bool DragonAscendFunc(bool testConds, bool runActions){
    unit u = EventUnit();
    string uType = UnitGetType(u);
    fixed life = UnitGetPropertyFixed(u, c_unitPropLife, c_unitPropCurrent);
    fixed lifeMax = UnitGetPropertyInt(u, c_unitPropLifeMax, c_unitPropCurrent);
    fixed lifeOld = CatalogFieldValueGetAsInt(c_gameCatalogUnit, StringSub(uType,9,StringLength(uType)), "LifeMax", EventPlayer());
    UnitSetPropertyFixed(u, c_unitPropLife, FixedToInt(2*(life+(lifeMax-lifeOld)*(1-life/lifeMax))+0.5)/2.);
    
    return true;
}
void DragonAscendInit(){
    DragonAscend = TriggerCreate("DragonAscendFunc");
    TriggerAddEventUnitAbility(DragonAscend, null, AbilityCommand("AscendedFlamespitter", 0), c_abilMorphStageStatsEnd, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Fission
//--------------------------------------------------------------------------------------------------
trigger Fission;
bool FissionF(bool testConds,bool runActions){
    unit Target=EventUnitTargetUnit();
    string TargetType=UnitGetType(Target);
    int TargetOwner=UnitGetOwner(Target);
    point TargetPoint=UnitGetPosition(Target);
    fixed TargetFacing=UnitGetFacing(Target);
    fixed TargetEnergy=UnitGetPropertyFixed(Target,c_unitPropEnergy,c_unitPropCurrent)/2;
    order TargetOrder=UnitOrder(Target,0);
    abilcmd TargetAbilityCommand=OrderGetAbilityCommand(TargetOrder);
    unit u1;
    unit u2;
    unitgroup Minerals;
    unit MineralField;
    UnitCreate(1,TargetType,c_unitCreateIgnorePlacement,TargetOwner,TargetPoint,TargetFacing);
    u1=UnitLastCreated();
    UnitCreate(1,TargetType,c_unitCreateIgnorePlacement,TargetOwner,TargetPoint,TargetFacing);
    u2=UnitLastCreated();
    UnitSetPropertyFixed(u1,c_unitPropLifePercent,40);
    UnitSetPropertyFixed(u2,c_unitPropLifePercent,40);
    UnitBehaviorAdd(u1,"DragonFission",u1,1);
    UnitBehaviorAdd(u2,"DragonFission",u2,1);
    UnitSetPropertyFixed(u1,c_unitPropEnergy,TargetEnergy);
    UnitSetPropertyFixed(u2,c_unitPropEnergy,TargetEnergy);
    if(TargetAbilityCommand==AbilityCommand("DroneHarvest",1)){
        Minerals=UnitGroupSearch(null,c_playerAny,TargetPoint,10,UnitFilter(1<<c_targetFilterHarvestableResource,0,0,0),0);
        MineralField=UnitGroupClosestToPoint(Minerals,TargetPoint);
        if(MineralField!=null){
            UnitIssueOrder(u1,OrderTargetingUnit(AbilityCommand("DroneHarvest",0),MineralField),c_orderQueueAddToEnd);
            UnitIssueOrder(u2,OrderTargetingUnit(AbilityCommand("DroneHarvest",0),MineralField),c_orderQueueAddToEnd);
        }
    }
    else{
        UnitIssueOrder(u1,TargetOrder,c_orderQueueReplace);
        UnitIssueOrder(u2,TargetOrder,c_orderQueueReplace);
    }
    if(UnitIsSelected(Target,TargetOwner)){
        UnitSelect(u1,TargetOwner,true);
        UnitSelect(u2,TargetOwner,true);
    }
    UnitCreateEffectUnit(Target,"TimedLifeFate",Target);
    return true;
}
void FissionI(){
    Fission=TriggerCreate("FissionF");
    TriggerAddEventUnitAbility(Fission,null,AbilityCommand("DragonFission",0),c_abilEffectStageCast,true);
    TriggerAddEventUnitAbility(Fission,null,AbilityCommand("DragonAscendedFission",0),c_abilEffectStageCast,true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: DragonRage
//--------------------------------------------------------------------------------------------------
trigger DragonRageUnitDeath;
trigger DragonRageChangeOwner;
void DragonRageHide(int p){
    unitgroup g = UnitGroup(null, p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    int i;
    unit u;
    bool b=false;
    for (i=UnitGroupCount(g,c_unitCountAll); i>=0 && !b; i -= 1) {
        u = UnitGroupUnitFromEnd(g,i);
        if (u != null && CatalogFieldValueGet(c_gameCatalogUnit,UnitGetType(u),"Race",p)=="Dragon"){
            b=true;
        }
    }
    UISetResourceVisible(PlayerGroupSingle(p),c_resourceTypeCustom,b);
}
bool DragonRageUnitDeathF(bool testConds, bool runActions){
    int p=EventPlayer();
    bool pIsDragon;
    int q=EventUnitDamageSourcePlayer();
    unit u=EventUnit();
    string uType;
    bool uIsDragon;
    unit v;
    int rage;
    // Conditions
    if(testConds){
        if(p <= 0){
            return false;
        }
        if(p >= 16){
            return false;
        }
        if(q <= 0){
            return false;
        }
        if(q >= 16){
            return false;
        }
        if(p == q){
            return false;
        }
        if(PlayerGetAlliance(q,c_allianceIdPassive,p)){
            return false;
        }
        if(u == null){
            return false;
        }
        if(!UnitFilterMatch(u,q,UnitFilter(0,0,(1<<c_targetFilterMissile),(1<<(c_targetFilterHallucination-32))|(1<<(c_targetFilterSummoned-32))))){
            return false;
        }
    }
    // Actions
    if(!runActions){
        return true;
    }
    // Calculate Rage
    uType=UnitGetType(u);
    uIsDragon=CatalogFieldValueGet(c_gameCatalogUnit,uType,"Race",p)=="Dragon";
    if(uIsDragon){
        rage = RoundI(UnitTypeGetCost(uType,c_unitCostSumMineralsVespene)/25+UnitTypeGetCost(uType,c_unitCostCustomResource)/5);
    }
    else{
        rage = RoundI(UnitTypeGetCost(uType,c_unitCostSumMineralsVespene)/25);
    }
    // No Rage to Award
    if(rage == 0){
        return true;
    }
    // Give Loser Rage
    pIsDragon=PlayerRace(p)=="Dragon";
    if(pIsDragon || uIsDragon){
        PlayerModifyPropertyInt(p,c_playerPropCustom,c_playerPropOperAdd,rage);
        //Hide Rage if no more dragons
        if(!pIsDragon){
            DragonRageHide(p);
        }
    }
    // Give Killer Rage
    v=EventUnitDamageSourceUnit();
    if(PlayerRace(q)=="Dragon" || (v!=null && CatalogFieldValueGet(c_gameCatalogUnit,UnitGetType(v),"Race",q)=="Dragon")){
        PlayerModifyPropertyInt(q,c_playerPropCustom,c_playerPropOperAdd,rage);
        UISetResourceVisible(PlayerGroupSingle(q),c_resourceTypeCustom,true);
    }
    return true;
}
bool DragonRageChangeOwnerF(bool testConds, bool runActions){
    int p=EventUnitOwnerOld();
    int q=EventUnitOwnerNew();
    // Conditions
    if (testConds) {
        if(CatalogFieldValueGet(c_gameCatalogUnit,UnitGetType(EventUnit()),"Race",p)!="Dragon"){
            return false;
        }
    }
    // Actions
    if (!runActions) {
        return true;
    }
    if(PlayerRace(p)!="Dragon"){
        DragonRageHide(p);
    }
    if(PlayerRace(q)!="Dragon"){
        DragonRageHide(q);
    }
    return true;
}
void DragonRageI(){
    DragonRageUnitDeath=TriggerCreate("DragonRageUnitDeathF");
    TriggerAddEventUnitDied(DragonRageUnitDeath,null);
    DragonRageChangeOwner=TriggerCreate("DragonRageChangeOwnerF");
    TriggerAddEventUnitChangeOwner(DragonRageChangeOwner,null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Arkwyrm
//--------------------------------------------------------------------------------------------------
trigger DragonArkwyrmTerritorialDivePrep;
trigger DragonArkwyrmTerritorialDiveChannel;
bool DragonArkwyrmTerritorialDivePrepFunc (bool testConds, bool runActions) {
    VisRevealArea(EventPlayer(), RegionCircle(EventUnitTargetPoint(), 5), 0.5, false);
    return true;
}
bool DragonArkwyrmTerritorialDiveChannelFunc(bool testConds, bool runActions){
    unit u = EventUnit();
    actorscope scope=ActorScopeFromUnit(u);
    point p = UnitGetPosition(u);
    point q = EventUnitTargetPoint();
    fixed dMax = DistanceBetweenPoints(p, q);
    fixed dHalf = dMax / 2;
    fixed angle = AngleBetweenPoints(p, q);
    fixed a = 40; // Arbitrary
    fixed t = 0;
    fixed tStep = 0.0625;
    fixed tHalf = SquareRoot(dMax/a);
    UnitBehaviorSetDuration(u, "ArkwyrmTerritorialDive", 2*tHalf);
    libNtve_gf_SendActorMessageToUnit(u, "SetScale 1,2,1 "+FixedToString(tHalf,5)+" Spell");
    for (t=0; t < tHalf; t += tStep) {
        UnitSetPosition(u, PointWithOffsetPolar(p, (a / 2) * (t * t), angle), true);
        Wait(tStep, c_timeGame);
    }
    libNtve_gf_SendActorMessageToUnit(u, "ClearScale "+FixedToString(tHalf,5)+" Spell");
    for (t=0; t < tHalf; t += tStep) {
        UnitSetPosition(u, PointWithOffsetPolar(p, dHalf + a*tHalf*t - (a / 2) * (t * t), angle), true);
        Wait(tStep, c_timeGame);
    }
    UnitSetPosition(u, q, true);
    
    return true;
}
void DragonArkwyrmTerritorialDiveInit(){
    DragonArkwyrmTerritorialDivePrep = TriggerCreate("DragonArkwyrmTerritorialDivePrepFunc");
    TriggerAddEventUnitAbility(DragonArkwyrmTerritorialDivePrep, null, AbilityCommand("ArkwyrmTerritorialDive", 0), c_abilEffectStagePrep, false);
    DragonArkwyrmTerritorialDiveChannel = TriggerCreate("DragonArkwyrmTerritorialDiveChannelFunc");
    TriggerAddEventUnitAbility(DragonArkwyrmTerritorialDiveChannel, null, AbilityCommand("ArkwyrmTerritorialDive", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: BrimstoneDemolisher
//--------------------------------------------------------------------------------------------------
trigger AscendedBrimstoneDemolisher;
fixed ABD_Factor=0.014770507813;
bool AscendedBrimstoneDemolisherF(bool testConds,bool runActions){
    unit u=EventUnit();
    fixed d=EventUnitDamageAmount();
    if(d>0&&UnitGetType(u)=="AscendedBrimstoneDemolisher"&&CatalogFieldValueGet(c_gameCatalogEffect,EventUnitDamageEffect(),"Kind",c_playerAny)!="Spell"){
        UnitSetPropertyFixed(u,c_unitPropLife,UnitGetPropertyFixed(u,c_unitPropLife,c_unitPropCurrent)+d-d*Pow2(-d*ABD_Factor));
        return true;
    }
    return false;
    
}
void BrimstoneDemolisherI(){
    AscendedBrimstoneDemolisher=TriggerCreate("AscendedBrimstoneDemolisherF");
    TriggerAddEventUnitDamaged(AscendedBrimstoneDemolisher,null,c_unitDamageTypeAny,c_unitDamageNonFatal,null);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Horned Magus
//--------------------------------------------------------------------------------------------------
trigger HornedMagus;
bool HornedMagusF(bool testConds,bool runActions){
    actorscope scope=ActorScopeFromUnit(EventUnit());
    string s="SetScale "+FixedToString(UnitGetPropertyFixed(EventUnit(),c_unitPropRadius,c_unitPropCurrent)+1,5);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel1",null,null,null),s);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel2",null,null,null),s);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel3",null,null,null),s);
    ActorSend(ActorCreate(scope,"HornedMagusFireShieldModel4",null,null,null),s);
    return true;
}
void HornedMagusI(){
    HornedMagus=TriggerCreate("HornedMagusF");
    TriggerAddEventUnitBehaviorChange(HornedMagus,null,"HornedMagusFireShield",c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: SunkenGuardian
//--------------------------------------------------------------------------------------------------
unit SunkenGuardianCaster;
unit SunkenGuardianTarget;
trigger SunkenGuardianAttack;
trigger SunkenGuardianMissile;
bool SunkenGuardianAttackF(bool testConds,bool runActions){
    SunkenGuardianCaster=EventUnitTarget();
    SunkenGuardianTarget=EventUnit();
    return true;
}
void SunkenGuardian(unit u,unit v,unit m){
    actor a=ActorFromScope(ActorScopeFromUnit(u),"::Main");
    point p=UnitGetPosition(v);
    fixed r=DistanceBetweenPoints(p,UnitGetPosition(m));
    UnitBehaviorAdd(u,"SunkenGuardian",u,1);
    while(UnitIsAlive(u)&&UnitIsAlive(m)&&r>.15){
        if(r>=10.5){
            r=.5;
        }
        else{
            r=1-r/21;
        }
        ActorSend(a,"AnimSetTime Attack "+FixedToString(r,c_fixedPrecisionAny));
        Wait(.0625,c_timeGame);
        if(UnitIsAlive(v)){
            p=UnitGetPosition(v);
        }
        r=DistanceBetweenPoints(p,UnitGetPosition(m));
    }
    ActorSend(a,"AnimSetTimeScale Attack .75");
    ActorSend(a,"AnimSetTime Attack 1.046875");
    Wait(.4375,c_timeGame);
    ActorSend(a,"AnimSetTimeScale Attack 1");
    while(UnitIsAlive(u)&&UnitIsAlive(m)&&r<500){
        r=DistanceBetweenPoints(UnitGetPosition(u),UnitGetPosition(m));
        if(r>0.15){
            if(r>=10.5){
                r=1.375;
            }
            else{
                r=1.75-r/28;
            }
            ActorSend(a,"AnimSetTime Attack "+FixedToString(r,c_fixedPrecisionAny));
            Wait(.0625,c_timeGame);
        }
        else{
            r=500;
        }
    }
    Wait(.125,c_timeGame);
    ActorSend(a,"AnimClear Attack .25");
    Wait(.0625,c_timeGame);
    UnitBehaviorRemove(u,"SunkenGuardian",1);
}
bool SunkenGuardianMissileF(bool testConds,bool runActions){
    unit u=EventUnit();
    if(UnitGetType(u)!="SunkenGuardianAttackMissile"){
        return false;
    }
    SunkenGuardian(SunkenGuardianCaster,SunkenGuardianTarget,u);
    return true;
}
void SunkenGuardianI(){
    SunkenGuardianAttack=TriggerCreate("SunkenGuardianAttackF");
    TriggerAddEventUnitAttacked2(SunkenGuardianAttack,null,"SunkenGuardianImpale1");
    SunkenGuardianMissile=TriggerCreate("SunkenGuardianMissileF");
    TriggerAddEventUnitRegion(SunkenGuardianMissile,null,RegionEntireMap(),true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: UnseenBeast
//--------------------------------------------------------------------------------------------------
trigger UnseenBeast;
bool UnseenBeastF(bool testConds,bool runActions){
    unit u = EventUnit();
    unit v = EventUnitTargetUnit();
    point p = UnitGetPosition(v);
    fixed angle = AngleBetweenPoints(UnitGetPosition(u),p);
    // Actions
    if (!runActions) {
        return true;
    }
    UnitSetPosition(u,PointWithOffsetPolar(p,StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit,UnitGetType(u),"Radius",c_playerAny))+StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit,UnitGetType(v),"Radius",c_playerAny)), angle),false);
    UnitSetFacing(EventUnit(),angle+180,0);
    return true;
}
void UnseenBeastI(){
    UnseenBeast=TriggerCreate("UnseenBeastF");
    TriggerAddEventUnitAbility(UnseenBeast,null,AbilityCommand("UnseenBeastTeleportAssaultTrigger",0),c_unitAbilStageComplete,false);
}

void libDRAG_InitCustomScript () {
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Dragons Race
//--------------------------------------------------------------------------------------------------
bool libDRAG_gt_InitializeDragonsRace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto4BACA602_g;
    int auto4BACA602_var;

    // Actions
    if (!runActions) {
        return true;
    }

    DragonRageI();
    DragonAscendInit();
    FissionI();
    DragonArkwyrmTerritorialDiveInit();
    BrimstoneDemolisherI();
    HornedMagusI();
    SunkenGuardianI();
    UnseenBeastI();
    auto4BACA602_g = PlayerGroupAll();
    auto4BACA602_var = -1;
    while (true) {
        auto4BACA602_var = PlayerGroupNextPlayer(auto4BACA602_g, auto4BACA602_var);
        if (auto4BACA602_var < 0) { break; }
        if ((PlayerRace(auto4BACA602_var) == "Dragon")) {
            UISetResourceVisible(PlayerGroupSingle(auto4BACA602_var), c_resourceTypeCustom, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libDRAG_gt_InitializeDragonsRace_Init () {
    libDRAG_gt_InitializeDragonsRace = TriggerCreate("libDRAG_gt_InitializeDragonsRace_Func");
    TriggerAddEventGeneric(libDRAG_gt_InitializeDragonsRace, "GAME START Dragon");
}

void libDRAG_InitTriggers () {
    libDRAG_gt_InitializeDragonsRace_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libDRAG_InitLib_completed = false;

void libDRAG_InitLib () {
    if (libDRAG_InitLib_completed) {
        return;
    }

    libDRAG_InitLib_completed = true;

    libDRAG_InitLibraries();
    libDRAG_InitCustomScript();
    libDRAG_InitTriggers();
}

